#textdomain wesnoth-Grnk

#define GRNK_DUMMY_SIDE SIDE
    # Dummy side for scenarios in which Grnk is not the side leader
    # This way, we don't need to worry about him coming across right
    # Needs to be controller=human, then set to null in prestart
    [side]
        side={SIDE}
        controller=human
        id=Grnk
        type=Grnk the Spearman  # Need this for S5

        team_name=Grnk_dummy_side
        user_team_name=_"Grnk_dummy_side"
        persistent=yes
        save_id=Grnk
        defeat_condition=never

        hidden=yes
        color=1

        village_gold=0
        gold=0
        income=-2  # No income whatsoever
    [/side]
#enddef

#define GET_GRNK_FROM_DUMMY_SIDE FROM_SIDE TO_SIDE
    # Change Grnk to side TO_SIDE, make sidekick (not leader)
    # and disable dummy side (=FROM_SIDE)
    {MODIFY_UNIT id=Grnk side {TO_SIDE}}
    {MODIFY_UNIT id=Grnk canrecruit no}
    {MODIFY_UNIT id=Grnk overlays misc/hero-icon.png}

    [modify_side]
        side={FROM_SIDE}
        controller=null
    [/modify_side]
#enddef

#define MOVE_GRNK_TO_DUMMY_SIDE TO_SIDE
    # Move Grnk back to his side and make him leader again
    # Change Grnk to side TO_SIDE, change canrecruit->yes
    {MODIFY_UNIT id=Grnk side {TO_SIDE}}
    {MODIFY_UNIT id=Grnk canrecruit yes}
    {MODIFY_UNIT id=Grnk overlays ""}
#enddef

#define STORY_IMAGE FILTER
    # Defines the variable 'story_image' as the profile
    # as the profile of the unit given by FILTER
    # This is done as a victory event
    # It is cleared as a prestart event
    [event]
        name=prestart
        {CLEAR_VARIABLE story_image}
    [/event]

    [event]
        name=victory
        {STORE_UNIT_VAR {FILTER} profile story_image}
    [/event]
#enddef

#define MODIFY_QUICKSAND PERCENTAGE X Y
    {MODIFY_TERRAIN Ds^Qs{PERCENTAGE} {X} {Y}}
    {REDRAW 1}
    {DELAY 100}
#enddef

#define REMOVE_AND_PLACE_ITEM HALO X Y DELAY_TIME
    [remove_item]
        x,y={X},{Y}
        image={HALO}
    [/remove_item]
    [item]
        x,y={X},{Y}
        halo={HALO}
    [/item]
    {DELAY {DELAY_TIME}}
#enddef

#define FIREBALL_BRIDGE X Y
    [if]
        [have_unit]
            x,y={X},{Y}
        [/have_unit]

        [then]
            [store_unit]
                [filter]
                    x,y={X},{Y}
                [/filter]

                variable=tmp_unit
            [/store_unit]

            {FIREBALL_KILL $tmp_unit.id}

            {CLEAR_VARIABLE tmp_unit}
        [/then]

        [else]
            {FIREBALL {X} {Y} ()}
        [/else]
    [/if]

    {MODIFY_TERRAIN Wot {X} {Y}}
    [redraw]
    [/redraw]
#enddef

#define GRNK_CANNOT_CAPTURE_VILLAGES SIDE
    # Grnk's side cannot capture villages, but they go neutral
    [event]
        name=capture
        first_time_only=no
        [filter]
            side={SIDE}
        [/filter]

        [capture_village]
            x,y=$unit.x,$unit.y
        [/capture_village]
    [/event]
#enddef

#define BEACON ID TURNS
    # ID: Identifier for the beacon (0 or 1) - currently there can only be two at a time
    #   and they need to have ID's 0 and 1
    #   because of a strange problem with removing the time area
    # TURNS: the number of turns the beacon should shine
    # Set up the menu item and actions to deploy the beacons in S5

    [set_menu_item]
        id=m01_menu_beacon{ID}
        description=_"Place the {TURNS}-Turn Beacon"
        image=halo/illuminates-aura.png~CROP(11,14,200,200)~SCALE(20,20)
        [filter_location]
            [filter]
                id=Wyssauba
            [/filter]
        [/filter_location]
        [show_if]
        [/show_if]
        [command]
            # Delete the menu item
            [set_menu_item]
                id=m01_menu_beacon{ID}
                [show_if]
                    [not]
                    [/not]
                [/show_if]
            [/set_menu_item]

            # Place the beacon
            {PLACE_IMAGE "items/sceptre-of-fire.png" $x1 $y1}
            [item]
                x,y=$x1,$y1
                halo=halo/lighthouse-aura.png
            [/item]
            [time_area]
                id=beacon{ID}
                x,y=$x1,$y1
                radius=2
                {MORNING}
            [/time_area]

            # Set some variables, needed for removing beacon later
            {VARIABLE S5.beacon{ID}_turn "$($turn_number+{TURNS})"}
            {VARIABLE S5.beacon{ID}_x $x1}
            {VARIABLE S5.beacon{ID}_y $y1}

            # Now the event that will remove the beacon
            [event]
                name=side 1 turn end
                first_time_only=no

                {IF_VAR turn_number equals $S5.beacon{ID}_turn (
                    [then]
                        {REMOVE_IMAGE $S5.beacon{ID}_x $S5.beacon{ID}_y}

                        # Somehow, removing the time_area sometimes does not (always)
                        # work. I have no idea why, it works in testing
                        # Need to do this differently then (much more complicated):
                        {VARIABLE S5.other_beacon_id "$(1-{ID})"}
                        {IF_VAR S5.other_beacon_id equals 0 (
                            [then]
                                {VARIABLE S5.other_beacon_x $S5.beacon0_x}
                                {VARIABLE S5.other_beacon_y $S5.beacon0_y}
                            [/then]
                            [else]
                                {VARIABLE S5.other_beacon_x $S5.beacon1_x}
                                {VARIABLE S5.other_beacon_y $S5.beacon1_y}
                            [/else]
                        )}
                        #{DEBUG "ID x,y: {ID} $S5.beacon{ID}_x,$S5.beacon{ID}_y â€” other: $S5.other_beacon_id $S5.other_beacon_x,$S5.other_beacon_y"}
                        [time_area]
                            # Need the [and]'s because of the way how 'radius' works
                            # Need the [not], in case to two areas are overlapping
                            [and]
                                x,y=$S5.beacon{ID}_x,$S5.beacon{ID}_y
                                radius=2
                            [/and]
                            [and]
                                [not]
                                    x,y=$S5.other_beacon_x,$S5.other_beacon_y
                                    radius=2
                                [/not]
                            [/and]
                            {DEFAULT_SCHEDULE_FIRST_WATCH}
                        [/time_area]
                        {REDRAW 1}

                        {IF_VAR S5.beacon_number not_equals 1 (
                            [then]
                                {MESSAGE Grnk "" "" _"There goes the first beacon."}
                                {VARIABLE S5.beacon_number 1}
                            [/then]
                            [else]
                                {MESSAGE Rutburt "" "" _"And that's it for the second beacon."}
                                {CLEAR_VARIABLE S5.beacon_number}
                            [/else]
                        )}
                        {CLEAR_VARIABLE S5.beacon{ID}_turn,S5.beacon{ID}_x,S5.beacon{ID}_y,S5.other_beacon_id,S5.other_beacon_x,S5.other_beacon_y}
                    [/then]
                )}
            [/event]
        [/command]
    [/set_menu_item]
#enddef

#define REMOVE_BEACON_MENU
    # Remove the beacon menu, in case beacons are not used by end of scenario
    [event]
        name=victory

        [set_menu_item]
            id=m01_menu_beacon0
            [show_if]
                [not]
                [/not]
            [/show_if]
        [/set_menu_item]

        [set_menu_item]
            id=m01_menu_beacon1
            [show_if]
                [not]
                [/not]
            [/show_if]
        [/set_menu_item]
    [/event]
#enddef

#define KOORZHAR_MAKES_GENERAL
    # Want this to happen _after_ he advances, but only the
    # first time, not for AMLA advancements, therefore the double event
    [event]
        name=advance
        [filter]
            id=Koorzhar
            type=Shmaltupp Lieutenant
        [/filter]

        [event]
            name=post advance

            {STORE_UNIT_VAR id=Koorzhar side Koorzhar_side}
            {GET_RANDOM_UNIT_ID (
                side=$Koorzhar_side
                [not]
                    id=Koorzhar
                [/not]
            )}

            {IF_VAR random_unit_id not_equals -1 (
                [then]
                    {MESSAGE $random_unit_id "" "" _"Congratulations, General Koorzhar."}
                [/then]
            )}
            {CLEAR_VARIABLE Koorzhar_side,random_unit_id}

            {MESSAGE Koorzhar "" "" _"General! Finally!"+{NOTE _"General is the highest rank in the Shmaltupp army, which means that a General is not promoted to Grand Marshal upon advancing."}}
        [/event]
    [/event]
#enddef

#define S8_ALLY_VARIABLES ALLY_LEADER
    # Set some variables, including the types for new units (used later)
    # Don't want to use the recruitment lists, as Heavy Infantrymen don't do so well
    # out here and we don't want Ruffians for Rutburt
    {VARIABLE S8.ally_leader {ALLY_LEADER}}
    {IF_VAR S8.ally_leader equals Koorzhar (
        [then]  # with Koorzhar
            #{DEBUG "Allying with Koorzhar"}
            {VARIABLE S8.ally_side 1}
            {VARIABLE S8.enemy_side 2}
            {VARIABLE S8.enemy_leader Rutburt}
            {VARIABLE S8.ally_side_new_units (Spearman,Bowman)}
            {VARIABLE S8.enemy_side_new_units (Footpad,Thug,Poacher)}
            {VARIABLE S8.ally_Grnk kid}
            {VARIABLE S8.ally_troops men}
            {VARIABLE S8.enemy_Grnk "little fella"}
            {VARIABLE S8.enemy_troops chaps}

            {UNDO_GRNK_IS_LOYAL ()}  # loyal only if with Rutburt
        [/then]
        [else]  # with Rutburt
            #{DEBUG "Allying with Rutburt"}
            {VARIABLE S8.ally_side 2}
            {VARIABLE S8.enemy_side 1}
            {VARIABLE S8.enemy_leader Koorzhar}
            {VARIABLE S8.ally_side_new_units (Footpad,Thug,Poacher)}
            {VARIABLE S8.enemy_side_new_units (Spearman,Bowman)}
            {VARIABLE S8.ally_Grnk "little fella"}
            {VARIABLE S8.ally_troops chaps}
            {VARIABLE S8.enemy_Grnk kid}
            {VARIABLE S8.enemy_troops men}

            {MAKE_GRNK_LOYAL ()}  # loyal only if with Rutburt
        [/else]
    )}
#enddef

#define FIST_ONLY_ATTACK FILTER
    # Remove all attacks from a unit and give it
    # a fist attack with 2/3 the hitpoints of its first attack

    {STORE_UNIT_VAR {FILTER} attack[0].number new_number}
    {STORE_UNIT_VAR {FILTER} attack[0].damage new_damage}
    {VARIABLE_OP new_damage multiply 0.67}
    {VARIABLE_OP new_damage round 0}
    #{DEBUG "{FILTER} $new_damage $new_number"}

    [object]
        duration=forever
        silent=yes
        [filter]
            {FILTER}
        [/filter]
        [effect]
            apply_to=remove_attacks
        [/effect]
        [effect]
            apply_to=new_attack
            name=fist
            description=_"fist"
            icon=attacks/fist-human.png
            type=impact
            range=melee
            damage=$new_damage
            number=$new_number
        [/effect]
    [/object]
    {CLEAR_VARIABLE new_damage,new_number}
#enddef

#define COUNT_UNITS FILTER
    # Count the units that match the filter; returned in variable 'unit_count'
    # FILTER: the unit filter to be matched
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=stored_count_units
        mode=append
    [/store_unit]
    {VARIABLE unit_count $stored_count_units.length}
    {CLEAR_VARIABLE stored_count_units}
#enddef

#define JUMP_BACK ID FROM_X FROM_Y
    # Have unit matching ID move (jump) to
    # the location opposite to FROM_X,FROM_Y
    # if that hex is unoccupied and passable
    # Return value: 'jumped' contains 'yes' or 'no'

    # First, store the unit, as we need several of its variables
    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=jump_unit
    [/store_unit]

    # Now find the jump_to hex
    {FIND_OPPOSITE_HEX $jump_unit.x $jump_unit.y {FROM_X} {FROM_Y}}
    #{DEBUG _"Going to: $opp_x,$opp_y"}

    # Check if the unit can reach this hex:
    [store_reachable_locations]
        [filter]
            id={ID}
        [/filter]
        [filter_location]
            x,y=$opp_x,$opp_y
            [not]  # unoccupied
                [filter]
                [/filter]
            [/not]
        [/filter_location]
        moves=max
        variable=jump_locs
    [/store_reachable_locations]

    # Only go there if it is reachable and unoccupied
    {IF_VAR jump_locs.length not_equals 0 (
        [then]
            [move_unit]
                id={ID}
                to_x=$opp_x
                to_y=$opp_y
            [/move_unit]
            {VARIABLE jumped yes}
        [/then]
        [else]
            {VARIABLE jumped no}
        [/else]
    )}

    {CLEAR_VARIABLE jump_unit,opp_x,opp_y,jump_locs}
#enddef
