#textdomain wesnoth-Grnk

# These are the macros specifically needed for the strange events in S9
# Some of them are also used in S10

#define SWITCH_TO_FOG
    # S9: Takes units off map and makes Grnk sit alone in the fog

    # Sound and flash white
    {SOUND dragonstick.ogg}
    {COLOR_ADJUST 255 255 255}

    # Gertburt gets stored separately
    [store_unit]
        [filter]
            id=Gertburt
        [/filter]
        variable=S9.stored_Gertburt
        kill=yes
    [/store_unit]

    # Store everybody else
    [store_unit]
        [filter]
            x=1-999  # not units on recall lists
            [not]
                id=Grnk
            [/not]
        [/filter]
        variable=S9.stored_other_units
        kill=yes
    [/store_unit]

    # Set fog
    [modify_side]
        side=1
        fog=yes
    [/modify_side]
    {REDRAW 1}

    # Back to normal color
    {COLOR_ADJUST 0 0 0}

    # Also get coordinates for other units to appear
    # Grnk's position:
    {STORE_UNIT_VAR id=Grnk x S9.Grnk_x}
    {STORE_UNIT_VAR id=Grnk y S9.Grnk_y}

    # Origin hex for new unit:
    {FAR_EMPTY_HEX $S9.Grnk_x $S9.Grnk_y (*^X*,Wo) 8}
    {VARIABLE S9.hex1_x $hex_x}
    {VARIABLE S9.hex1_y $hex_y}

    # Destination hex for new unit; same direction from Grnk, but closer
    {VARIABLE S9.hex2_x "$(0.625*$S9.Grnk_x + 0.375*$hex_x)"}
    {VARIABLE_OP S9.hex2_x round 0}
    {VARIABLE S9.hex2_y "$(0.625*$S9.Grnk_y + 0.375*$hex_y)"}
    {VARIABLE_OP S9.hex2_y round 0}
    # Now make sure it is passable
    {CLOSE_EMPTY_HEX $S9.hex2_x $S9.hex2_y (*^X*,W*) 0}
    {VARIABLE S9.hex2_x $hex_x}
    {VARIABLE S9.hex2_y $hex_y}
    {CLEAR_VARIABLE hex_x,hex_y}
    #{DEBUG "$S9.Grnk_x,$S9.Grnk_y $S9.hex1_x,$S9.hex1_y $S9.hex2_x,$S9.hex2_y"}
#enddef

#define RESET_FROM_FOG
    # S9: Resets to previous state

    # Sound and flash white
    {SOUND dragonstick.ogg}
    {COLOR_ADJUST 255 255 255}

    # Kill everybody out there (except Grnk)
    [kill]
        x=1-999  # not units on recall lists
        [not]
            id=Grnk
        [/not]
    [/kill]

    # Get Gertburt back
    [unstore_unit]
        variable=S9.stored_Gertburt
        find_vacant=yes # probably not necessary, but just in case I missed something
    [/unstore_unit]
    {CLEAR_VARIABLE S9.stored_Gertburt}

    # Unstore everybody else
    {FOREACH S9.stored_other_units unstore_i}
        [unstore_unit]
            variable=S9.stored_other_units[$unstore_i]
            find_vacant=yes # probably not necessary, but just in case I missed something
        [/unstore_unit]
    {NEXT unstore_i}

    # Clear all the variables from SWITCH_TO_FOG
    {CLEAR_VARIABLE S9.stored_Gertburt,S9.stored_other_units,S9.Grnk_x,S9.Grnk_y,S9.hex1_x,S9.hex1_y,S9.hex2_x,S9.hex2_y}

    # Unset fog
    [modify_side]
        side=1
        fog=no
    [/modify_side]
    {REDRAW 1}

    # Back to normal color
    {COLOR_ADJUST 0 0 0}

    [scroll_to_unit]
        id=Grnk
    [/scroll_to_unit]
#enddef

#define SWITCH_TO_FOG_TELEPORT X Y CLEARER_X CLEARER_Y
    # Switch to fog and do a teleport at the same time
    # CLEARER_X,CLEARER_Y: position of fog clearer
    {SWITCH_TO_FOG}

    # Store Grnk at his original position
    [store_unit]
        [filter]
            id=Grnk
        [/filter]
        variable=S9.tmp_Grnk
    [/store_unit]

    # Fog clearer
    {UNIT 1 "Vampire Bat" {CLEARER_X} {CLEARER_Y} id,max_moves=fog_clearer,6}
    [hide_unit]
        id=fog_clearer
    [/hide_unit]
    {REDRAW 1}

    {TELEPORT_AWAY id=Grnk {X} {Y} () ()}
    {REDRAW 1}
#enddef

#define RESET_FROM_FOG_TELEPORT
    # Reset from fog after a fog + teleport

    # Need to get rid of teleported Grnk (in case he was not killed)
    [kill]
        id=Grnk
    [/kill]

    # ... and restore the original
    [unstore_unit]
        variable=S9.tmp_Grnk
        find_vacant=yes # probably not necessary, but just in case I missed something
    [/unstore_unit]
    {CLEAR_VARIABLE S9.tmp_Grnk}

    {RESET_FROM_FOG}
#enddef

#define S9_START_SEQUENCE
    # The starting sequence in both S9 and S10
    {MESSAGE Clerezzasz "" "" _"Ssstinking lizzzard! We will get you!"}
    {MESSAGE Xaz "" "" _"Who you're calling a lizzzard?! You will pay for what you have done!"}
    {MESSAGE_RIGHT Grnk _"What the hell is going on? Where am I? <i>What</i> am I?"}

    # Get Gertburt and his chaps out
    {VARIABLE stored_Gertburt.side 1}
    {VARIABLE stored_Gertburt.moves $stored_Gertburt.max_moves}
    {VARIABLE stored_Gertburt.canrecruit no}
    {VARIABLE stored_Gertburt.overlays misc/hero-icon.png}
    [unstore_unit]
        variable=stored_Gertburt
        x,y=14,45
    [/unstore_unit]
    # Don't clear variable in S9, still needed in S10 !!!
    [modify_unit]
        [filter]
            id=Gertburt
        [/filter]

        [modifications]
            {TRAIT_LOYAL}
        [/modifications]
    [/modify_unit]
    {FULL_HEAL_AND_CURE id=Gertburt}
    {MOVE_UNIT id=Gertburt 17 44}

    # Gertburt's units (all are quick and loyal)
    {UNIT 1 "Trapper" 14 45 (
        id=Gertburt_troop1
        overlays=misc/loyal-icon.png
        [modifications]
            {TRAIT_QUICK}
            {TRAIT_LOYAL}
        [/modifications]
    )}
    {MOVE_UNIT id=Gertburt_troop1 16 44}
    {UNIT 1 "Bandit" 14 45 (
        id=Gertburt_troop2
        overlays=misc/loyal-icon.png
        [modifications]
            {TRAIT_QUICK}
            {TRAIT_LOYAL}
        [/modifications]
    )}
    {MOVE_UNIT id=Gertburt_troop2 16 43}
    {UNIT 1 "Thug" 14 45 (
        id=Gertburt_troop3
        overlays=misc/loyal-icon.png
        [modifications]
            {TRAIT_QUICK}
            {TRAIT_LOYAL}
        [/modifications]
    )}
    {MOVE_UNIT id=Gertburt_troop3 17 45}
    {UNIT 1 "Footpad" 14 45 (
        id=Gertburt_troop4
        overlays=misc/loyal-icon.png
        [modifications]
            {TRAIT_QUICK}
            {TRAIT_LOYAL}
        [/modifications]
    )}
    {MOVE_UNIT id=Gertburt_troop4 15 44}

    {MESSAGE_RIGHT Gertburt _"Hi there, little fella."}

    # Set the turn on which the pursuers appear
    # Need to do it this way, as start event does not have turn set
    [event]
        name=turn end

        {VARIABLE pursuers_appear_turn $turn_number}
        [set_variable]
            name=pursuers_appear_turn
            {QUANTITY add 2 1 1}
        [/set_variable]
        #{DEBUG "Pursuers on turn: $pursuers_appear_turn"}
    [/event]
#enddef

#define SURROUND_UNIT FILTER TYPES SOLDIER_ID X Y
    # Move units adjacent to a unit given by FILTER away,
    # then surround by Side 4 soldiers
    # TYPES: unit types for the surrounding units to choose from
    # SOLDIER_ID: id's for the soldiers, moving in from X,Y

    {STORE_UNIT_VAR {FILTER} x SU_x}
    {STORE_UNIT_VAR {FILTER} y SU_y}

    # Move anybody directly next to the unit away
    [store_unit]
        [filter]
            [filter_adjacent]
                {FILTER}
            [/filter_adjacent]
        [/filter]
        variable=SU_tmp_units
    [/store_unit]
    #{DEBUG $SU_tmp_units.length}
    {FOREACH SU_tmp_units SU_i}
        {FAR_EMPTY_HEX $SU_x $SU_y (*^X*,Wo) 2}
        {MOVE_UNIT id=$SU_tmp_units[$SU_i].id $hex_x $hex_y}
    {NEXT SU_i}
    {CLEAR_VARIABLE SU_tmp_units,hex_x,hex_y}

    # Now find all passable hexes around the unit
    [store_locations]
        [and]
            x,y=$SU_x,$SU_y
            radius=1
        [/and]
        [not]
            [filter]
            [/filter]
        [/not]
        [not]
            terrain=*^X*,Wo
        [/not]
        variable=SU_tmp_locs
    [/store_locations]
    {VARIABLE SU_n_locs $SU_tmp_locs.length}

    # Move soldiers around the unit
    {REPEAT $SU_n_locs (
        {RANDOM {TYPES}}
        [move_unit_fake]
            type=$random
            side=4
            x={X},$SU_tmp_locs[$REPEAT_i].x
            y={Y},$SU_tmp_locs[$REPEAT_i].y
        [/move_unit_fake]
        {UNIT 4 $random $SU_tmp_locs[$REPEAT_i].x $SU_tmp_locs[$REPEAT_i].y (id={SOLDIER_ID}$REPEAT_i)}
    )}
    {CLEAR_VARIABLE SU_x,SU_y,random,SU_tmp_locs}
#enddef

#define ATTACK_UNTIL_DEATH FILTER SOLDIER_ID RANGE DAMAGE
    # Attack unit defined in FILTER until death
    # with the soliders defined by SOLDIER_ID
    # DAMAGE: the damage to be done with every hit
    # SU_n_locs: number of attacking soldiers, set automatically by SURROUND_UNIT
    #   or set manually

    {REPEAT $SU_n_locs (
        {ATTACK_DEFENSE_ANIMATION id={SOLDIER_ID}$REPEAT_i {FILTER} {RANGE} yes {DAMAGE}}
        {STORE_UNIT_VAR {FILTER} hitpoints hp}
        {VARIABLE_OP hp sub {DAMAGE}}
        {MODIFY_UNIT {FILTER} hitpoints $hp}
        {IF_VAR hp less_than 1 (
            [then]  # If unit is dead, kill him and break loop
                [kill]
                    {FILTER}
                    x=1-999
                    animate=yes
                [/kill]
                {VARIABLE REPEAT_i 100}
            [/then]
            [else]  # If unit is not done and this was last attacker, start from beginning
                {IF_VAR REPEAT_i equals "$($SU_n_locs-1)" (
                    [then]
                        {VARIABLE REPEAT_i -1}
                    [/then]
                )}
            [/else]
        )}
    )}
    {CLEAR_VARIABLE SU_n_locs,hp}
#enddef

#define S9_RESET_MAP
    # S9: Reset everything on map back to the beginning of scenario state

    # Sound and flash white
    {SOUND dragonstick.ogg}
    {COLOR_ADJUST 255 255 255}

    # Kill everybody on the field
    [kill]
        x=1-999
    [/kill]

    # Deactivate side 4 until return
    [modify_side]
        side=4
        controller=null
    [/modify_side]

    # Get Grnk back out
    [unstore_unit]
        variable=S9.stored_Grnk_start
    [/unstore_unit]
    [scroll_to_unit]
        id=Grnk
    [/scroll_to_unit]

    # Get the saurian leaders back
    [unstore_unit]
        variable=S9.stored_Clerezzasz
    [/unstore_unit]
    [unstore_unit]
        variable=S9.stored_Xaz
    [/unstore_unit]

    # Two saurian guardians
    {UNIT 2 (Saurian Ambusher) 13 14 (ai_special=guardian)}
    {UNIT 3 (Saurian Ambusher) 44 30 (ai_special=guardian)}

    # Restore everybody's gold
    {SET_GOLD 1 $Grnks_gold}
    {SET_GOLD 2 $S9.gold_side2}
    {SET_GOLD 3 $S9.gold_side3}

    # And uncapture all the villages
    [capture_village]
        x,y=1-999,1-999
    [/capture_village]

    # Also need to set recruiting back to normal (in case they are converted to drakes)
    [modify_side]
        side=2
        recruit=Saurian Augur,Saurian Skirmisher
    [/modify_side]
    [modify_side]
        side=3
        recruit=Saurian Augur,Saurian Skirmisher
    [/modify_side]

    # No random event to happen this turn
    # Comment out for now, but leave for possible reinclusion
    #{VARIABLE S9.no_event_this_turn "$($turn_number+1)"}

    # Back to normal color
    {COLOR_ADJUST 0 0 0}
#enddef

#define PURSUERS_APPEAR
    # Grnk's pursuers appear
    # Only need that once, will adjust the variable as needed
    [event]
        name=new_turn
        first_time_only=no

        {IF_VAR turn_number equals $pursuers_appear_turn (
            [then]
                [modify_side]
                    side=4
                    controller=ai
                [/modify_side]

                {SCROLL_TO 20 45}
                {UNIT 4 (Shmaltupp Sergeant) 20 45 (id=sergeant1)}
                {REPEAT 10 (
                    {CLOSE_EMPTY_HEX 20 45 () 1}
                    {RANDOM Spearman,Spearman,Spearman,Spearman,Bowman,Bowman,Bowman,Bowman,Swordsman}
                    [move_unit_fake]
                        type=$random
                        side=4
                        x=20,$hex_x
                        y=45,$hex_y
                    [/move_unit_fake]
                    {GENERIC_UNIT 4 $random $hex_x $hex_y}
                )}
                {CLEAR_VARIABLE random,hex_x,hex_y}

                {MESSAGE sergeant1 "" "" _"There he is. Let's get him!"}
                {MESSAGE Grnk "" "" _"Just for a change, they actually mean me."}
                {CLEAR_VARIABLE pursuers_appear_turn}
            [/then]
        )}
    [/event]
#enddef

#define GERTBURT_CHAPS_DIE
    # Only one of Gertburt's starting units can die
    # Note: one unit can die _per_ restart, that's why it is set up this way
    [event]
        name=die
        first_time_only=no
        [filter]
            side=1
            [not]
                id=Grnk,Gertburt
            [/not]
            [not]
                type=Peasant
            [/not]
        [/filter]

        [kill]
            id=$unit.id
        [/kill]

        # The first
        [if]
            [have_unit]
                side=1
                [not]
                    id=Grnk,Gertburt
                [/not]
                [not]
                    type=Peasant
                [/not]
                count=3
            [/have_unit]
            [then]
                {MESSAGE Gertburt "" "" _"See you in the afterlife, old fella. Soon, probably."}
                {MESSAGE narrator "wesnoth-icon.png" "Remember" _"You will lose the game if one more of Gertburt's loyal units dies."}
            [/then]
        [/if]

        # The second
        [if]
            [have_unit]
                side=1
                [not]
                    id=Grnk,Gertburt
                [/not]
                [not]
                    type=Peasant
                [/not]
                count=2
            [/have_unit]
            [then]
                {MESSAGE Gertburt "" "" _"I couldn't keep my promise!"}
                [endlevel]
                    result=defeat
                [/endlevel]
            [/then]
        [/if]
    [/event]
#enddef

#define GRNK_MOVES_AWAY
    # Grnk moves to an empty hex 3 steps away
    {STORE_UNIT_VAR id=Grnk x S9.Grnk_x}
    {STORE_UNIT_VAR id=Grnk y S9.Grnk_y}
    {FAR_EMPTY_HEX $S9.Grnk_x $S9.Grnk_y (*^X*,Wo) 3}
    {MOVE_UNIT id=Grnk $hex_x $hex_y}
    {CLEAR_VARIABLE S9.Grnk_x,S9.Grnk_y,hex_x,hex_y}
#enddef

#define S9_PEASANTS_FIRST_TIME
    # First time a village is captured:
    # One peasant, hostile, killed by Grnk
    [event]
        name=capture
        [filter]
            side=1
            [filter_location]
                terrain=*^V*
            [/filter_location]
        [/filter]

        {UNIT 4 Peasant $x1 $y1 (
            id=peasantA
            [modifications]
                {TRAIT_QUICK}
                {TRAIT_INTELLIGENT}
            [/modifications]
        )}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Who are you? What do you want from us? Oh, hey, you're that goblin from Shmaltupp that turns people's hands to stone, aren't you?"}
        {MESSAGE Grnk "" "" _"Uh ..."}
        {MESSAGE Gertburt "" "" {WHISPER _"I believe that's a good thing in this case."}}
        {MESSAGE Grnk "" "" _"Umm. Yes?"}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Nobody remembers when somebody last stood up for a peasant. And we hear that they are now hunting you down for that. But you're still a goblin, and an abomination at that. No goblin better get in front of my pitchfork."}

        {STORE_UNIT_VAR id=Grnk x S9.Grnk_x}
        {STORE_UNIT_VAR id=Grnk y S9.Grnk_y}

        # If there's no empty, passable hex next to Grnk, move a unit away
        [store_locations]
            [and]
                x,y=$S9.Grnk_x,$S9.Grnk_y
                radius=1
            [/and]
            [not]
                [filter]
                [/filter]
            [/not]
            [not]
                terrain=*^X*,Wo
            [/not]
            variable=S9.tmp_locs
        [/store_locations]
        # If there is no empty passable hex:
        {IF_VAR S9.tmp_locs.length equals 0 (
            [then]
                [store_unit]
                    [filter]
                        [filter_adjacent]
                            id=Grnk
                        [/filter_adjacent]
                    [/filter]
                    variable=S9.tmp_units
                [/store_unit]
                {FAR_EMPTY_HEX $S9.Grnk_x $S9.Grnk_y (*^X*,Wo) 2}
                {MOVE_UNIT id=$S9.tmp_units[0].id $hex_x $hex_y}
            [/then]
        )}

        # Now that there is guaranteed space, move peasant next to Grnk
        {CLOSE_EMPTY_HEX $S9.Grnk_x $S9.Grnk_y (*^X*,Wo) 1}
        {MOVE_UNIT id=peasantA $hex_x $hex_y}

        {ATTACK_DEFENSE_ANIMATION id=peasantA id=Grnk melee no ()}
        {ATTACK_DEFENSE_ANIMATION id=Grnk id=peasantA melee yes 7}
        {MODIFY_UNIT id=peasantA hitpoints 10}
        {ATTACK_DEFENSE_ANIMATION id=Grnk id=peasantA melee yes 7}
        {MODIFY_UNIT id=peasantA hitpoints 3}
        {ATTACK_DEFENSE_ANIMATION id=Grnk id=peasantA melee yes 7}
        {MODIFY_UNIT id=peasantA hitpoints 0}
        [kill]
            id=peasantA
            animate=yes
        [/kill]

        {MESSAGE Grnk "" "" _"No! I didn't want to do that. He forced me to do that. You saw it, Gertburt."}
        {MESSAGE Gertburt "" "" _"In fact, I did. I guess I was wrong. Ungrateful bastard!"}
        {CLEAR_VARIABLE S9.Grnk_x,S9.Grnk_y,S9.tmp_locs,S9.tmp_units,hex_x,hex_y}

        # So that next peasant event does not happen on the same turn
        # if no village was capture before the last restart
        {VARIABLE S9.peasant_event_this_turn yes}
    [/event]

#enddef

#define S9_PEASANTS_SECOND_TIME
    # Second time a village is captured:
    # Peasant surround Grnk, friendly, run off for revolt
    [event]
        name=capture
        [filter]
            side=1
            [filter_location]
                terrain=*^V*
            [/filter_location]
        [/filter]
        [filter_condition]  # This is here as it is possible to skip this in between restarts
            {VARIABLE_CONDITIONAL S9.peasant_event_this_turn not_equals yes}
        [/filter_condition]

        {UNIT 4 Peasant $x1 $y1 (
            id=peasantA
            [modifications]
                {TRAIT_QUICK}
                {TRAIT_INTELLIGENT}
            [/modifications]
        )}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Who are you? What do you want from us? Oh, hey, you're that goblin from Shmaltupp that turns people's hands to stone, aren't you?"}
        {MESSAGE Grnk "" "" _"Uh ..."}
        {MESSAGE Gertburt "" "" {WHISPER _"I believe that's a good thing in this case."}}
        {MESSAGE Grnk "" "" {WHISPER _"I don't think so."}+"

Umm. No?"}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Yes, you are! I was there. I would recognize you anywhere."}

        {SURROUND_UNIT id=Grnk Peasant peasant $x1 $y1}

        {MESSAGE Grnk "" "" _"What do you want from me?"}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Nobody remembers when somebody last stood up for a peasant. And we hear that they are now hunting you down for that. Something needs to happen."}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"It is time that the farmers and fishermen stand up and make a statement. It has to start somewhere, so why not here? Brothers, get the combat pitchforks!"}

        # Move peasants into hut
        [store_unit]
            [filter]
                type=Peasant
            [/filter]
            variable=S9.tmp_peassants
        [/store_unit]
        {FOREACH S9.tmp_peassants S9.i}
            [kill]
                id=$S9.tmp_peassants[$S9.i].id
            [/kill]
            [move_unit_fake]
                type=Peasant
                side=4
                x=$S9.tmp_peassants[$S9.i].x,30
                y=$S9.tmp_peassants[$S9.i].y,35
            [/move_unit_fake]
        {NEXT S9.i}

        {MESSAGE Grnk "" "" _"Combat pitchforks?!?"}
        {MESSAGE Gertburt "" "" _"Don't ask me."}

        {CLEAR_VARIABLE SU_n_locs,S9.tmp_peassants}

        # So that next peasant event does not happen on the same turn
        # if no village was capture before the last restart
        {VARIABLE S9.peasant_event_this_turn yes}
    [/event]
#enddef

# !!!! This one is currently not used, but leave it here for now anyway !!!!
#define S9_PEASANTS_THIRD_TIME
    # Third time a village is captured:
    # Peasant surround Grnk, hostile, Grnk petrifies them all
    [event]
        name=capture
        [filter]
            side=1
            [filter_location]
                terrain=*^V*
            [/filter_location]
        [/filter]
        [filter_condition]  # This is here as it is possible to skip this in between restarts
            {VARIABLE_CONDITIONAL S9.peasant_event_this_turn not_equals yes}
        [/filter_condition]

        {UNIT 4 Peasant $x1 $y1 (
            id=peasantA
            [modifications]
                {TRAIT_QUICK}
                {TRAIT_INTELLIGENT}
            [/modifications]
        )}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Who are you? What do you want from us? Oh, hey, you're that goblin from Shmaltupp that turns people's hands to stone, aren't you?"}
        {MESSAGE Grnk "" "" _"Uh ..."}
        {MESSAGE Gertburt "" "" {WHISPER _"I believe that's a good thing in this case."}}
        {MESSAGE Grnk "" "" _"Umm. Yes?"}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"Nobody remembers when somebody last stood up for a peasant. And we hear that they are now hunting you down for that. But you're still a goblin, and an abomination at that. Brothers, there he is! Let's get him!"}

        {SURROUND_UNIT id=Grnk Peasant peasant $x1 $y1}

        {MESSAGE Grnk "" "" _"Please don't do this? I don't want to hurt you."}
        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Peasant" _"We do not want you to hurt us either. But we are going to hurt you. Get hi..."}

        # Prunes leading animation
        {STORE_UNIT_VAR id=Grnk x S9.Grnk_x}
        {STORE_UNIT_VAR id=Grnk y S9.Grnk_y}
        {LEADING_HALO_PRUNES Grnk}

        # Turn each peasant to stone
        [store_unit]
            [filter]
                type=Peasant
            [/filter]
            variable=S9.tmp_peassants
        [/store_unit]
        {FOREACH S9.tmp_peassants S9.i}
            {FIREBALL $S9.tmp_peassants[$S9.i].x $S9.tmp_peassants[$S9.i].y "~GS()~CS(100,50,100)"}
            [petrify]
                id=$S9.tmp_peassants[$S9.i].id
            [/petrify]
        {NEXT S9.i}

        {MESSAGE Gertburt "" "" _"What the hell was that?! How did you do that?"}
        {MESSAGE Grnk "" "" _"I ... I have no idea. I told them that I did not want to hurt them! You saw it, Gertburt."}
        {MESSAGE Gertburt "" "" _"In fact, I did. It's their own fault — but now <i>you</i> are trapped in the middle of a bunch of peasant statues. How are you ..."}

        {SCROLL_TO $S9.Grnk_x $S9.Grnk_y}
        {EARTHQUAKE_OWN (
            [kill]
                type=Peasant
            [/kill]
            {REDRAW 1}
        )}

        {MESSAGE Gertburt "" "" _"I see. You're an odd little fella, indeed. Remind me never to piss you off!"}

        {CLEAR_VARIABLE SU_n_locs,S9.tmp_peassants,S9.Grnk_x,S9.Grnk_y}
    [/event]
#enddef
