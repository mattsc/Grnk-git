#textdomain wesnoth-Grnk

# Collect the macros specific to Scenarios 14 and 15 (and 13) here

#define SUREFIRE_BRITTLE_EVENTS SIDE
    # Give all goblins recruited/recalled by Grnk surefire
    [event]
        name=recruit,recall
        first_time_only=no

        [filter]
            side={SIDE}
            race=goblin
        [/filter]

        {SUREFIRE (id=$unit.id)}
    [/event]

    # Make all skeletons recruited/recalled by undead side brittle
    [event]
        name=recruit,recall
        first_time_only=no

        [filter]
            [filter_side]
                [enemy_of]
                    side={SIDE}
                [/enemy_of]
            [/filter_side]
            type=Skeleton,Deathblade,Revenant,Draug,Skeleton Archer,Bone Shooter,Banebow,Chocobone
        [/filter]

        {BRITTLE (id=$unit.id)}
    [/event]
#enddef

# The image used for the wood status overlays in S14-Submission
#define WOOD_OVERLAY
    misc/blank-hex.png~BLIT(misc/wood.png,30,2)
#enddef

#define DARK_MAGES
    # Put out the dark mages (needed twice in S14)

    # Don't really need a name for the leader, but want to make sure it
    # is not randomly chosen to be Karcyn
    {UNIT 6 (Dark Sorcerer) 17 2 (id,name,canrecruit,facing=Bliddyn,_"Bliddyn",yes,sw)}
    {UNIT 6 (Dark Adept) 15 2 (facing=sw)}
    {UNIT 6 (Dark Adept) 18 2 (facing=sw)}
    {UNIT 6 (Dark Adept) 17 4 (facing=sw)}

    {MESSAGE Bliddyn "" "" _"Onward, you maggots! We'll get rid of that vexatious little goblin. The Master's gratitude will be immeasurable."}
#enddef

#define BAT_EVENTS_P2S14 SIDE
    # The events for the bats to come out of the caves and go back in.
    # Can be active at all times, since it depends on the right terrain being on the map.
    # This does not include interactions with units of other sides (dark mages, Master, ...).

    [event]
        name=side {SIDE} turn
        first_time_only=no

        [store_time_of_day]
        [/store_time_of_day]

        [switch]
            variable=time_of_day.id

            # Bats appear at dusk
            [case]
                value=dusk

                [store_locations]
                    terrain=Qxu
                    [not]
                        [filter]
                        [/filter]
                    [/not]

                    variable=tmp_locs
                [/store_locations]

                {FOREACH tmp_locs i_loc}
                    {SCROLL_TO $tmp_locs[$i_loc].x $tmp_locs[$i_loc].y}

                    [unit]
                        side={SIDE}
                        type=Vampire Bat

                        x,y=$tmp_locs[$i_loc].x,$tmp_locs[$i_loc].y
                        animate=yes

                        [variables]
                            org_x=$tmp_locs[$i_loc].x
                            org_y=$tmp_locs[$i_loc].y
                        [/variables]
                    [/unit]
                {NEXT i_loc}
            [/case]

            # They start moving back at second watch
            [case]
                value=second_watch

                [store_unit]
                    [filter]
                        side={SIDE}
                    [/filter]

                    variable=tmp_bats
                [/store_unit]

                {FOREACH tmp_bats i_bat}
                    [modify_unit]
                        [filter]
                            id=$tmp_bats[$i_bat].id
                        [/filter]

                        goto_x=$tmp_bats[$i_bat].variables.org_x
                        goto_y=$tmp_bats[$i_bat].variables.org_y
                    [/modify_unit]
                {NEXT i_bat}
            [/case]
        [/switch]

        {CLEAR_VARIABLE time_of_day}
    [/event]

    # A bat moving back onto cave terrain disappears
    [event]
        name=moveto
        first_time_only=no

        [filter]
            side={SIDE}
            [filter_location]
                terrain=Qxu
            [/filter_location]
        [/filter]

        [kill]
            id=$unit.id
            animate=yes
        [/kill]
    [/event]

#enddef

#define PEASANT_EVENTS_P2S14 SIDE BOAT_SIDE
    # Peasants capturing villages results in other peasants appearing
    # and adjacent boats converting to their side.
    # This does not include the first time message, which is only supposed
    # to happen in P2S14, not in P2S15.

    [event]
        name=new_peasants
        first_time_only=no

        {RANDOM "1..2"}
        [while]
            [variable]
                name=random
                greater_than=0
            [/variable]

            [do]
                {FIND_CLOSEST_HEX $peasant_x1 $peasant_y1 (
                    [not]
                        terrain=W*,S*
                    [/not]
                    [not]
                        [filter]
                        [/filter]
                    [/not]
                )}

                [move_unit_fake]
                    type=Peasant
                    side={SIDE}
                    x=$peasant_x1,$hex_x
                    y=$peasant_y1,$hex_y
                [/move_unit_fake]

                {UNIT {SIDE} (Peasant no level) $hex_x $hex_y (moves=0)}

                {VARIABLE_OP random add -1}
            [/do]
        [/while]

        {CLEAR_VARIABLE hex_x,hex_y,random}

        # If there is a Boat adjacent to the village, convert it to peasants' side
        [modify_unit]
            [filter]
                side={BOAT_SIDE}
                type=Boat
                [filter_location]
                    [filter_adjacent_location]
                        x,y=$peasant_x1,$peasant_y1
                    [/filter_adjacent_location]
                [/filter_location]
            [/filter]

            side={SIDE}
            moves=0
        [/modify_unit]
    [/event]

    [event]
        name=capture
        first_time_only=no

        [filter]
            side={SIDE}
            type=Peasant no level
        [/filter]

        [if]
            [variable]
                name=owner_side
                equals=0
            [/variable]

            [then]
                {VARIABLE peasant_x1 $x1}
                {VARIABLE peasant_y1 $y1}
                [fire_event]
                    name=new_peasants
                [/fire_event]
                {CLEAR_VARIABLE peasant_x1,peasant_y1}

                [fire_event]
                    name=first_new_peasant
                [/fire_event]
            [/then]
        [/if]
    [/event]

    [event]
        name=moveto
        first_time_only=no

        [filter]
            side={SIDE}
            type=Boat
            [filter_location]
                [filter_adjacent_location]
                    terrain=*^V*
                    owner_side=0
                [/filter_adjacent_location]
            [/filter_location]
        [/filter]

        [store_locations]
            terrain=*^V*
            [filter_adjacent_location]
                x,y=$x1,$y1
            [/filter_adjacent_location]

            variable=tmp_locs
        [/store_locations]

        {VARIABLE peasant_x1 $tmp_locs[0].x}
        {VARIABLE peasant_y1 $tmp_locs[0].y}

        [capture_village]
            x,y=$peasant_x1,$peasant_y1
            side={SIDE}
        [/capture_village]

        [fire_event]
            name=new_peasants
        [/fire_event]

        {CLEAR_VARIABLE tmp_locs,peasant_x1,peasant_y1}
    [/event]
#enddef

#define MAL_AN_SHADOW
    # After Mal An is killed, his shadow follows Grnk

    [event]
        name=moveto
        first_time_only=no
        [allow_undo]
        [/allow_undo]

        [filter]
            id=Grnk
        [/filter]

        [if]
            [not]
                [have_unit]
                    id=Mal An
                [/have_unit]
            [/not]

            [then]
                [move_unit_fake]
                    type=Water Lich
                    x=$x2,$x1
                    y=$y2,$y1
                    image_mods=~GS()~O(15%)
                [/move_unit_fake]

                # Since these are potentially used in two scenarios, we need to
                # set a variable to decided whether messages were shown already.
                # And apparently [switch] cannot handle empty variables, but
                # [variable] can. Second message [if] block must come first.
                [if]
                    [variable]
                        name=MA_shadow_message
                        equals=1
                    [/variable]

                    [then]
                        {MESSAGE Grnk "" "" {GASP_BEGINNING _"smiles"}}

                        {VARIABLE MA_shadow_message 2}
                    [/then]
                [/if]
                [if]
                    [variable]
                        name=MA_shadow_message
                        equals=""
                    [/variable]

                    [then]
                        {MESSAGE Grnk "" "" _"What was that?"}
                        {MESSAGE Vanak "" "" _"What what?"}
                        {MESSAGE Grnk "" "" _"A sensation like somebody pushed an icicle right through my chest."}

                        {VARIABLE MA_shadow_message 1}
                    [/then]
                [/if]
            [/then]
        [/if]
    [/event]
#enddef

#define P2S15_GOLD
    {GOLD 600 500 400}
#enddef

#define GROSSAUBA_SKLAF_PORTRAIT
    "portraits/humans/transparent/mage-arch.png~O(0.6)~BLIT(portraits/undead/transparent/ghoul.png~CROP(25,0,400,367)~O(0.55),5,85)"
#enddef

#define WYSSAUBA_MASTER_PORTRAIT
    "portraits/humans/transparent/mage-light.png~CROP(80,25,400,400)~O(0.6)~BLIT(portraits/undead/transparent/ancient-lich.png~O(0.7))"
#enddef

#define BRING_OUT_MAL_AN
    # S15: surround Grnk by Mal An and his undead guards.
    # Happens in both versions of S15.

    [store_unit]
        [filter]
            id=Grnk
        [/filter]

        variable=BOMA_Grnk
    [/store_unit]

    [store_unit]
        [filter]
            [filter_adjacent]
                id=Grnk
            [/filter_adjacent]
        [/filter]

        variable=BOMA_adj_units
    [/store_unit]

    [store_map_dimensions]
        variable=BOMA_map_size
    [/store_map_dimensions]

    # Bring Mal An out to north if Grnk is at southern edge of map, to south otherwise
    [if]
        [variable]
            name=BOMA_Grnk.y
            equals=$BOMA_map_size.height
        [/variable]

        [then]
            {VARIABLE BOMA_facing n}
            {VARIABLE BOMA_dy -1}
        [/then]

        [else]
            {VARIABLE BOMA_facing s}
            {VARIABLE BOMA_dy 1}
        [/else]
    [/if]

    {SOUND rumble.ogg}

    {FOREACH BOMA_adj_units i_u}
        {FAR_EMPTY_HEX $BOMA_Grnk.x $BOMA_Grnk.y (M*,M*^*,W*,Q*) 2}
        {MOVE_UNIT (id=$BOMA_adj_units[$i_u].id) $hex_x $hex_y}
    {NEXT i_u}

    {MESSAGE Grnk "" "" _"What the ..."}

    {EXTRA_ANIM_HEX $BOMA_Grnk.x "$($BOMA_Grnk.y+$BOMA_dy)" $BOMA_facing (
        alpha=0~0.3:700,0.3~1:300
        offset=-1~0:1000
        [frame]
            image=$stored_Mal_An_S14.image:1000
            sound=rumble.ogg
        [/frame]
    )}

    {VARIABLE stored_Mal_An_S14.side 2}
    {VARIABLE stored_Mal_An_S14.facing $BOMA_facing}
    [unstore_unit]
        variable=stored_Mal_An_S14
        x=$BOMA_Grnk.x
        y="$($BOMA_Grnk.y+$BOMA_dy)"
        find_vacant=no
    [/unstore_unit]
    {FULL_HEAL_AND_CURE (id=Mal An)}
    {CLEAR_VARIABLE stored_Mal_An_S14}

    {MESSAGE (Mal An) "" "" _"Surprise!"}

    {SOUND rumble.ogg}

    {REPEAT 5 (
        {CLOSE_EMPTY_HEX $BOMA_Grnk.x $BOMA_Grnk.y () 1}
        {RANDOM "Draug,Banebow"}
        {SOUND thunderstick.ogg}
        {UNIT 2 $random $hex_x $hex_y (role=undead_guard)}
    )}

    {MESSAGE (Mal An) "" "" _"Looks like this is the end of the mighty Grnk."}

    {CLEAR_VARIABLE BOMA_Grnk,BOMA_adj_units,BOMA_map_size,BOMA_facing,BOMA_dy,hex_x,hex_y,random}
#enddef

#define CAMPFIRE X Y
    # Add an animated campfire during dark time
    [terrain_graphics]
        x,y={X},{Y}
        [tile]
            x=0
            y=0
            [image]
                layer=0
                name="misc/fire-A[01~08].png:140"

                [variant]
                    tod=dawn,morning,afternoon
                    name="embellishments/stones-small6.png~CROP(12,0,60,72)"
                [/variant]
            [/image]
        [/tile]
    [/terrain_graphics]
#enddef

#define SETUP_MAP_S15 DY PEASANT_X PEASANT_Y FACING
	# Empty the recall list and placeholder leader
	[kill]
		side=1
	[/kill]

	[gold]
		side=1
		amount=$gold_S14
	[/gold]
	{CLEAR_VARIABLE gold_S14}

	# The castles as on the previous map (needs to be done before unstoring peasants)
	[terrain]
		x=28-30,30,29,31,29-31
		y="$(20+{DY})","$(21+{DY})","$(22+{DY})","$(24+{DY})","$(25+{DY})"
		terrain=Ce
	[/terrain]
	[terrain]
		x=29,30
		y="$(21+{DY})","$(24+{DY})"
		terrain=Ke
	[/terrain]

	# Then put all the different units either out there or onto the recall list
	{VARIABLE stored_Grnk_S14.moves $stored_Grnk_S14.max_moves}
	[unstore_unit]
		variable=stored_Grnk_S14
		x,y=29,"$(21+{DY})"
	[/unstore_unit]

	{VARIABLE stored_Vanak_S14.moves $stored_Vanak_S14.max_moves}
	[unstore_unit]
		variable=stored_Vanak_S14
		x,y=30,"$(24+{DY})"
	[/unstore_unit]

	{VARIABLE stored_Quank_S14.moves $stored_Quank_S14.max_moves}
	[unstore_unit]
		variable=stored_Quank_S14
		x,y=28,"$(21+{DY})"
	[/unstore_unit]

	{VARIABLE stored_peasant_leader_S14.moves $stored_peasant_leader_S14.max_moves}
	[unstore_unit]
		variable=stored_peasant_leader_S14
		x,y={PEASANT_X},{PEASANT_Y}
	[/unstore_unit]
	[modify_unit]
		[filter]
			id=peasant_leader
		[/filter]

		canrecruit=no
		overlays=misc/hero-icon.png
		[modifications]
			{TRAIT_LOYAL}
		[/modifications]
	[/modify_unit]

	{FOREACH stored_other_units_S14 i_u}
		{VARIABLE stored_other_units_S14[$i_u].moves $stored_other_units_S14[$i_u].max_moves}
		{VARIABLE stored_other_units_S14[$i_u].side 1}

		[switch]
			variable=stored_other_units_S14[$i_u].type

			[case] # NB: Not previously converted boats will be on Grnk's side now also
				value=Boat

				[unstore_unit]
					variable=stored_other_units_S14[$i_u]
					x=$stored_other_units_S14[$i_u].x
					y="$($stored_other_units_S14[$i_u].y+{DY})"
				[/unstore_unit]
			[/case]

			[case]
				value=Peasant no level

				{CLOSE_EMPTY_HEX {PEASANT_X} {PEASANT_Y} (W*,Ce) 1}
				[unstore_unit]
					variable=stored_other_units_S14[$i_u]
					x,y=$hex_x,$hex_y
				[/unstore_unit]
				[capture_village]
					side=1
					x,y=$hex_x,$hex_y
				[/capture_village]
				{CLEAR_VARIABLE hex_x,hex_y}
			[/case]

			[else]
				[unstore_unit]
					variable=stored_other_units_S14[$i_u]
					x,y=recall,recall
				[/unstore_unit]
			[/else]
		[/switch]
	{NEXT i_u}

	{FULL_HEAL_AND_CURE (side=1)}

	[modify_unit]
		[filter]
			side=1
			[not]
				type=Boat
			[/not]
		[/filter]

		facing={FACING}
	[/modify_unit]

    {RESET_MAP S14 0 {DY} 1 yes}

    # Since some variables are still needed later in the scenarios (and different
    # ones depending on the scenario, we do not clear them here, but leave that
    # to the scenario itself.
#enddef
