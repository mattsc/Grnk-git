#textdomain wesnoth-Grnk

#define REMOVE_STAFF_S1 STAFF X Y OTHER_STAFF
    # Remove the staffs when a unit moves onto them or when Grnk gets within 2 hexes of them
    # @STAFF: number of the staff to be removed (1 or 2)
    # @X,@Y: coordinates of that staff
    # @OTHER_STAFF: number of the other staff (can be calculated easily, but ....)

    [event]
        name=moveto
        [filter]
            side=1
            x,y={X},{Y}
        [/filter]

        [fire_event]
            name=remove_staff{STAFF}
            [primary_unit]
                id=$unit.id
            [/primary_unit]
        [/fire_event]
    [/event]

    [event]
        name=moveto
        [filter]
            id=Grnk
            [filter_location]
                x,y={X},{Y}
                radius=2
            [/filter_location]
        [/filter]

        [if]
            [variable]
                name=S.prune_used
                not_equals=yes
            [/variable]

            [then]
                [fire_event]
                    name=remove_staff{STAFF}
                    [primary_unit]
                        id=Grnk
                    [/primary_unit]
                [/fire_event]
            [/then]
        [/if]
    [/event]

    [event]
        name=remove_staff{STAFF}

        # Prune effect
        [if]
            [variable]
                name=unit.x
                not_equals={X}
            [/variable]
            [or]
                [variable]
                    name=unit.y
                    not_equals={Y}
                [/variable]
            [/or]

            [then]
                {MESSAGE_RIGHT Grnk _"Don't fail me now, little prune."}
                {LEADING_HALO_PRUNES Grnk}
                {LEADING_HALO_PRUNES_HEX {X} {Y}}
                {VARIABLE S.prune_used yes}
            [/then]
        [/if]

        {REMOVE_IMAGE {X} {Y}}
        {PLACE_IMAGE "items/staff-broken.png" {X} {Y}}
        {CLEAR_VARIABLE S.staff{STAFF}}

        # IF the other one is still there
        [if]
            [variable]
                name=S.staff{OTHER_STAFF}
                equals=1
            [/variable]

            [then]
                {MESSAGE_RIGHT $unit.id _"I got one of them."}
            [/then]

            [else]
                {MESSAGE_RIGHT Grnk _"That should do it.  Now we can finish them off."}
            [/else]
        [/if]
    [/event]
#enddef

#define MASTERS_LAIR SIDE VIEWING_SIDE
    # Display the Master's lair.
    # @SIDE: the side of the Master's units
    # @VIEWING_SIDE: the player's side (to be able to shroud when setting up)

    [modify_side]
        side={VIEWING_SIDE}
        shroud=yes
    [/modify_side]
    [redraw]
    [/redraw]

    [kill]
        x=1-999 # keep the ones on the recall list
    [/kill]

    [replace_map]
        map="{~add-ons/Grnk/part2/maps/Masters_Lair.map}"
        shrink=yes
        expand=yes
    [/replace_map]

    {UNIT {SIDE} (Ancient Lich) 25 4 (id,name,canrecruit=Master,_"The Master",yes)}
    {UNIT {SIDE} (Necrophage) 26 5 (id,name=Sklaf,Sklaf)}

    {UNIT {SIDE} (Deathblade) 16 7 ()}
    {UNIT {SIDE} (Bone Shooter) 16 9 ()}
    {UNIT {SIDE} (Draug) 26 7 ()}
    {UNIT {SIDE} (Banebow) 32 4 ()}
    {UNIT {SIDE} (Draug) 30 16 ()}

    [modify_side]
        side={VIEWING_SIDE}
        shroud=no
    [/modify_side]
    [redraw]
    [/redraw]

    {SCROLL_TO 22 6}
#enddef

#define UNDEAD_THRU_PORTAL X Y SIDE FACING TO_X TO_Y BRITTLIZE
    # Bring an undead unit through the portal. Unit type is randomly
    # chosen from L2 and L3 skeletons.
    #
    # @X,@Y: coordinate of the portal
    # @SIDE: side of the unit coming through the portal
    # @FACING: the direction in which the unit faces when coming through
    # @@TO_X,@TO_Y: coordinate to which to move unit after coming through
    # @BRITTLIZE: set to 'yes' if units is to be made brittle

    {RANDOM "1..4"} # Random unit type
    [switch]
        variable=random

        [case]
            value=1

            {VARIABLE UTP_type Revenant}
#ifver WESNOTH_VERSION < 1.13.0
            {VARIABLE UTP_image "units/undead-skeletal/revenant.png"}
#else
            {VARIABLE UTP_image "units/undead-skeletal/revenant/revenant.png"}
#endif
        [/case]

        [case]
            value=2

            {VARIABLE UTP_type "Bone Shooter"}
            {VARIABLE UTP_image "units/undead-skeletal/bone-shooter.png"}
        [/case]

        [case]
            value=3

            {VARIABLE UTP_type Draug}
            {VARIABLE UTP_image "units/undead-skeletal/draug.png"}
        [/case]

        [case]
            value=4

            {VARIABLE UTP_type Banebow}
            {VARIABLE UTP_image "units/undead-skeletal/banebow.png"}
        [/case]
    [/switch]

    {PORTAL_IN {X} {Y} "$UTP_image" {FACING}}

    {UNIT {SIDE} "$UTP_type" {X} {Y} (facing={FACING})}

    {VARIABLE UTP_brittle {BRITTLIZE}}
    [if]
        [variable]
            name=UTP_brittle
            equals=yes
        [/variable]

        [then]
            {BRITTLE (x,y={X},{Y})}
        [/then]
    [/if]

    {CLEAR_VARIABLE random,UTP_type,UTP_image,UTP_brittle}

    {MOVE_UNIT (x,y={X},{Y}) {TO_X} {TO_Y}}
#enddef

#define BEAR_SIDE SIDE YRANGE_RANDOM XRANGE_COORD YRANGE_COORD
    # Set up the AI side for the bear in S8 and S9.
    # This is specialized to those scenarios, won't work in general.
    # Bear always moves in on the left (x=1) for the y ranges given
    # in the macro arguments.
    #
    # @YRANGE_RANDOM: range of y coordinates for bear to appear in RANDOM macro format
    # @X/YRANGE_COORDS: range of x/y coordinates for bear to leave in x,y= key format
    #
    # Example: {BEAR_SIDE 3 "1..7,13..16,20..27" "2-5,2-5,2-5" "1-7,13-16,20-27"}

    [side]
        side={SIDE}
        controller=ai
        no_leader=yes
        hidden=yes

        team_name=bears

        [ai]
            aggression=1
        [/ai]

        gold=0
        income=-2
    [/side]

    [event]
        name=prestart

        [micro_ai]
            side={SIDE}
            ai_type=big_animals
            action=add

            ca_score=90000
            [filter]
                type=Bear
            [/filter]
            [filter_location]
                x,y=1-18,1-36 # Works for both S8 and S9
                terrain=M*,H*,H*^*
            [/filter_location]
        [/micro_ai]
    [/event]

    # 50% chance of getting a new bear each turn if there is none.
    # This happens before the "remove bear" event so that we do
    # not immediately create a new bear on the same turn the old one left.
    [event]
        name=side {SIDE} turn
        first_time_only=no

        [if]
            [have_unit]
                side={SIDE}
                type=Bear
                count=0
            [/have_unit]

            [then]
                {RANDOM "1..2"}
                [if]
                    [variable]
                        name=random
                        equals=1
                    [/variable]

                    [then]
                        {RANDOM {YRANGE_RANDOM}}

                        {SCROLL_TO 1 $random}
                        {MOVE_UNIT_ONTO_MAP {SIDE} Bear 1 $random ne (id=bear)}

                        {SOUND wolf-growl-1.ogg}
                        {MESSAGE bear "" "" _"Grrrrrrwwwllll !!!"}
                    [/then]
                [/if]

                {CLEAR_VARIABLE random}
            [/then]
        [/if]
    [/event]

    # 50% chance of moving bear off the map if it's inside X/YRANGE_COORDS.
    # This happens after the "new bear" event. Removing a new bear immediately
    # is avoided by excluding hexes with x=1 in X/YRANGE_COORDS.
    [event]
        name=side {SIDE} turn refresh
        first_time_only=no

        [if]
            [have_unit]
                side={SIDE}
                type=Bear
                x={XRANGE_COORD}
                y={YRANGE_COORD}
            [/have_unit]

            [then]
                {RANDOM "1..2"}

                [if]
                    [variable]
                        name=random
                        equals=1
                    [/variable]

                    [then]
                        [store_unit]
                            [filter]
                                id=bear
                            [/filter]

                            variable=tmp_bear
                        [/store_unit]

                        {MOVE_UNIT (id=bear) 1 $tmp_bear.y}
                        {CLEAR_VARIABLE tmp_bear}

                        {SOUND wolf-growl-1.ogg}
                        {MESSAGE bear "" "" _"Grrrrrrwwwllll !!!"}

                        {MOVE_UNIT_OFF_MAP bear sw}
                    [/then]
                [/if]

                {CLEAR_VARIABLE random}
            [/then]
        [/if]
    [/event]
#enddef
