#textdomain wesnoth-Grnk

#define MASTERS_LAIR SIDE VIEWING_SIDE
    [modify_side]
        side={VIEWING_SIDE}
        shroud=yes
    [/modify_side]

    [redraw]
    [/redraw]

    [kill]
        x=1-999 # keep the ones on the recall list
    [/kill]

    [replace_map]
        map="{~add-ons/Grnk/part2/maps/Master.map}"
        shrink=yes
        expand=yes
    [/replace_map]

    {UNIT {SIDE} (Ancient Lich) 25 4 (id,name,canrecruit=The Master,The Master,yes)}
    {UNIT {SIDE} (Necrophage) 26 5 (id,name=Sklaf,Sklaf)}

    {UNIT {SIDE} (Deathblade) 16 7 ()}
    {UNIT {SIDE} (Bone Shooter) 16 9 ()}
    {UNIT {SIDE} (Draug) 26 7 ()}
    {UNIT {SIDE} (Banebow) 32 4 ()}
    {UNIT {SIDE} (Draug) 30 16 ()}

    [modify_side]
        side={VIEWING_SIDE}
        shroud=no
    [/modify_side]

    [redraw]
    [/redraw]

    {SCROLL_TO 22 6}
#enddef

#define UNDEAD_THRU_PORTAL X Y SIDE FACING TO_X TO_Y
    {RANDOM "1..4"}

    [switch]
        variable=random

        [case]
            value=1

            {VARIABLE UTP_type Revenant}
#ifver WESNOTH_VERSION < 1.13.0
            {VARIABLE UTP_image "units/undead-skeletal/revenant.png"}
#else
            {VARIABLE UTP_image "units/undead-skeletal/revenant/revenant.png"}
#endif
        [/case]

        [case]
            value=2

            {VARIABLE UTP_type "Bone Shooter"}
            {VARIABLE UTP_image "units/undead-skeletal/bone-shooter.png"}
        [/case]

        [case]
            value=3

            {VARIABLE UTP_type Draug}
            {VARIABLE UTP_image "units/undead-skeletal/draug.png"}
        [/case]

        [case]
            value=4

            {VARIABLE UTP_type Banebow}
            {VARIABLE UTP_image "units/undead-skeletal/banebow.png"}
        [/case]
    [/switch]

    {PORTAL_IN {X} {Y} "$UTP_image" {FACING}}

    {UNIT {SIDE} "$UTP_type" {X} {Y} (facing={FACING})}

    {CLEAR_VARIABLE random,UTP_type,UTP_image}

    {MOVE_UNIT (x,y={X},{Y}) {TO_X} {TO_Y}}
#enddef

#define BEAR_SIDE SIDE YRANGE_RANDOM XRANGE_COORD YRANGE_COORD
    # Set up the AI side for the bear in S8 and S9
    # This is specialized for those scenarios, won't work in general
    # Bear always moves in on the left (x=1) for the y ranges given
    # in the macro arguments.
    #
    # @YRANGE_RANDOM: range of y coordinates for bear to appear in RANDOM macro format
    # @X/YRANGE_COORDS: range of x/y coordinates for bear to leave in x,y= key format
    #
    # Example: {BEAR_SIDE 3 "1..7,13..16,20..27" "2-5,2-5,2-5" "1-7,13-16,20-27"}

    [side]
        side={SIDE}
        controller=ai
        no_leader=yes
        hidden=yes

        team_name=bears

        [ai]
            aggression=1
        [/ai]

        gold=0
        income=-2
    [/side]

    [event]
        name=prestart

        [micro_ai]
            side={SIDE}
            ai_type=big_animals
            action=add

            ca_score=90000

            [filter]
                type=Bear
            [/filter]
            [filter_location]
                x,y=1-18,1-36 # Works for both S8 and S9
                terrain=M*,H*,H*^*
            [/filter_location]
        [/micro_ai]
    [/event]

    # 50% chance of getting a new bear each turn if there is none
    # This happens before the "remove bear" event so that we do
    # not immediately create a new bear on the same turn the old one left
    [event]
        name=side {SIDE} turn
        first_time_only=no

        [if]
            [have_unit]
                side={SIDE}
                type=Bear
                count=0
            [/have_unit]

            [then]
                {RANDOM "1..2"}

                [if]
                    [variable]
                        name=random
                        equals=1
                    [/variable]

                    [then]
                        {RANDOM {YRANGE_RANDOM}}

                        {SCROLL_TO 1 $random}
                        {MOVE_UNIT_ONTO_MAP {SIDE} Bear 1 $random ne (id=bear)}

                        {SOUND wolf-growl-1.ogg}
                        {MESSAGE bear "" "" _"Grrrrrrwwwllll !!!"}
                    [/then]
                [/if]

                {CLEAR_VARIABLE random}
            [/then]
        [/if]
    [/event]

    # 50% chance of moving bear off the map
    # This happens after the "new bear" event.  Removing a new bear immediately
    # is avoided by not selecting bears with x=1 for this
    [event]
        name=side {SIDE} turn refresh
        first_time_only=no

        [if]
            [have_unit]
                side={SIDE}
                type=Bear
                x={XRANGE_COORD}
                y={YRANGE_COORD}
            [/have_unit]

            [then]
                {RANDOM "1..2"}

                [if]
                    [variable]
                        name=random
                        equals=1
                    [/variable]

                    [then]
                        {STORE_UNIT_VAR (id=bear) y S.tmp_y}
                        {MOVE_UNIT (id=bear) 1 $S.tmp_y}

                        {SOUND wolf-growl-1.ogg}
                        {MESSAGE bear "" "" _"Grrrrrrwwwllll !!!"}

                        {MOVE_UNIT_OFF_MAP bear sw}
                    [/then]
                [/if]

                {CLEAR_VARIABLE random,S.tmp_y}
            [/then]
        [/if]
    [/event]
#enddef

# The image used for the wood status overlays in S14-Submission
#define WOOD_OVERLAY
    misc/blank-hex.png~BLIT(misc/wood.png,30,2)
#enddef

#define DARK_MAGES
    # For S14-Submission (needed twice)

    {UNIT 6 (Dark Sorcerer) 18 1 (id,canrecruit=adept_leader,yes)}
    {GENERIC_UNIT 6 (Dark Adept) 16 1}
    {GENERIC_UNIT 6 (Dark Adept) 19 1}
    {GENERIC_UNIT 6 (Dark Adept) 18 3}

    {MESSAGE adept_leader "" "" _"Onward, you maggots!  We'll get rid of that vexatious little goblin.  The Master's gratitude will be immeasurable."}
#enddef

#define BURN_VILLAGE X Y
    [store_locations]
        x,y={X},{Y}
        variable=tmp_locs
    [/store_locations]

    {VARIABLE new_terrain Gd}

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=H
        [/variable]

        [then]
            {VARIABLE new_terrain Hhd}
        [/then]
    [/if]

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=S
        [/variable]

        [then]
            {VARIABLE new_terrain Ss}
        [/then]
    [/if]

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=W
        [/variable]

        [then]
            {VARIABLE new_terrain Ww}
        [/then]
    [/if]

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=R
        [/variable]

        [then]
            {VARIABLE new_terrain Rd}
        [/then]
    [/if]

    [terrain]
        x,y={X},{Y}
        terrain=$new_terrain
    [/terrain]

    [item]
        x,y={X},{Y}
        image=scenery/village-human-burned1.png
    [/item]

    {CLEAR_VARIABLE tmp_locs,new_terrain}
#enddef

#define RESET_MAP SUFFIX X_OFFSET Y_OFFSET
    # Resets units, villages and images to the state they were in before
    # switching maps in Scenarios 14 and 15.

    # Put the units back on the map
    {FOREACH S.stored_units_{SUFFIX} i_u}
        [unstore_unit]
            variable=S.stored_units_{SUFFIX}[$i_u]

            x="$($S.stored_units_{SUFFIX}[$i_u].x+{X_OFFSET})"
            y="$($S.stored_units_{SUFFIX}[$i_u].y+{Y_OFFSET})"
        [/unstore_unit]
    {NEXT i_u}



    # Set village ownership back to what it used to be
    {FOREACH S.stored_villages_{SUFFIX} i_v}
        [capture_village]
            side=$S.stored_villages_{SUFFIX}[$i_v].owner_side

            x="$($S.stored_villages_{SUFFIX}[$i_v].x+{X_OFFSET})"
            y="$($S.stored_villages_{SUFFIX}[$i_v].y+{Y_OFFSET})"
        [/capture_village]
    {NEXT i_v}

    # Restore the items, and re-burn villages
    {FOREACH S.stored_items_{SUFFIX} i_i}
        [item]
            image=$S.stored_items_{SUFFIX}[$i_i].image

            x="$($S.stored_items_{SUFFIX}[$i_i].x+{X_OFFSET})"
            y="$($S.stored_items_{SUFFIX}[$i_i].y+{Y_OFFSET})"
        [/item]

        [if]
            [variable]
                name=S.stored_items_{SUFFIX}[$i_i].image
                equals=scenery/village-human-burned1.png
            [/variable]

            [then]
                {BURN_VILLAGE "$($S.stored_items_{SUFFIX}[$i_i].x+{X_OFFSET})" "$($S.stored_items_{SUFFIX}[$i_i].y+{Y_OFFSET})"}
            [/then]
        [/if]
    {NEXT i_i}

    # Restore the bridges the orcs built (only relevant for Part b)
    {FOREACH S.stored_bridges_{SUFFIX} i_b}
        [terrain]
            terrain=$S.stored_bridges_{SUFFIX}[$i_b].terrain

            x="$($S.stored_bridges_{SUFFIX}[$i_b].x+{X_OFFSET})"
            y="$($S.stored_bridges_{SUFFIX}[$i_b].y+{Y_OFFSET})"
        [/terrain]
    {NEXT i_b}

    {CLEAR_VARIABLE S.stored_units_{SUFFIX},S.stored_villages_{SUFFIX},S.stored_items_{SUFFIX},S.stored_bridges_{SUFFIX}}
#enddef
