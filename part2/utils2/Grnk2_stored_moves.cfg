#textdomain wesnoth-Grnk

# These are macros for replaying of stored moves in S14
# They are specific to that scenario and not generally usable
# Set up as macros only to keep the scenario file shorter (it's long enough the way it is)

#define STORE_MOVES
    # First, record all enter_hex coordinates inside the overlap zone in a temporary variable
    # We store both the hex the unit is coming from and the hex it is moving into
    # This produces a somewhat redundant list, but it's need for moves that
    # start within the overlap zone
    [event]
        name=enter_hex
        first_time_only=no
        [allow_undo]
        [/allow_undo]

        [filter]
            side=2
        [/filter]

        [if]
            [variable]
                name=x2
                greater_than=18
            [/variable]
            [variable]
                name=y2
                greater_than=12
            [/variable]

            [then]
                [set_variables]
                    name=tmp_move
                    mode=append

                    [value]
                        x="$($x2-18)"
                        y="$($y2-12)"
                    [/value]
                [/set_variables]
            [/then]
        [/if]

        [if]
            [variable]
                name=x1
                greater_than=18
            [/variable]
            [variable]
                name=y1
                greater_than=12
            [/variable]

            [then]
                #{DEBUG_MSG "enter hex:  $unit.id : $x1 $y1  from  $x2 $y2"}

                [set_variables]
                    name=tmp_move
                    mode=append

                    [value]
                        x="$($x1-18)"
                        y="$($y1-12)"
                    [/value]
                [/set_variables]
            [/then]
        [/if]
    [/event]

    # At the end of the move, we set up coordinates for use with [move_unit_fake]
    # If the unit move ends in the overlap zone, we also store the unit
    [event]
        name=moveto
        first_time_only=no
        [allow_undo] # This means that undone moves will be replayed, but so be it
        [/allow_undo]

        [filter]
            side=2
        [/filter]

        [if]
            [variable]
                name=tmp_move.length
                greater_than=1
            [/variable]

            [then]
                [set_variable]
                    name=tmp_path_x
                    [join]
                        variable=tmp_move
                        key=x
                        separator=,
                    [/join]
                [/set_variable]

                [set_variable]
                    name=tmp_path_y
                    [join]
                        variable=tmp_move
                        key=y
                        separator=,
                    [/join]
                [/set_variable]

                [set_variables]
                    name=stored_moves.moves
                    mode=append

                    [value]
                        turn_number=$turn_number
                        action=move
                        id=$unit.id
                        type=$unit.type
                        path_x=$tmp_path_x
                        path_y=$tmp_path_y
                    [/value]
                [/set_variables]
            [/then]
        [/if]

        {CLEAR_VARIABLE tmp_move,tmp_path_x,tmp_path_y}

        [if]
            [variable]
                name=x1
                greater_than=18
            [/variable]
            [variable]
                name=y1
                greater_than=12
            [/variable]

            [then]
                [set_variables]
                    name=stored_moves.moves
                    mode=append

                    [value]
                        turn_number=$turn_number
                        action=place_unit
                        x="$($x1-18)"
                        y="$($y1-12)"
                        unit=$unit
                    [/value]
                [/set_variables]

                [store_unit]
                    [filter]
                        id=$unit.id
                    [/filter]

                    variable=stored_moves.moves["$($stored_moves.moves.length-1)"].unit
                [/store_unit]
            [/then]
        [/if]
    [/event]

    # Check for healing events also.
    # Done by checking HP difference between turn and turn refresh events
    [event]
        name=side 2 turn
        first_time_only=no

        [store_unit]
            [filter]
                side=2
                x,y=19-99,13-99
            [/filter]

            variable=tmp_units
        [/store_unit]
    [/event]

    [event]
        name=side 2 turn refresh
        first_time_only=no

        {FOREACH tmp_units tmp_i}
            [store_unit]
                [filter]
                    id=$tmp_units[$tmp_i].id
                [/filter]

                variable=tmp_unit
            [/store_unit]

            [if]
                [variable]
                    name=tmp_units[$tmp_i].hitpoints
                    not_equals=$tmp_unit.hitpoints
                [/variable]

                [then]
                    {VARIABLE heal_amount "$($tmp_unit.hitpoints-$tmp_units[$tmp_i].hitpoints)"}

                    [set_variables]
                        name=stored_moves.moves
                        mode=append

                        [value]
                            turn_number=$turn_number
                            action=healed
                            id=$tmp_unit.id
                            amount=$heal_amount
                        [/value]
                    [/set_variables]
                [/then]
            [/if]
        {NEXT tmp_i}

        {CLEAR_VARIABLE tmp_unit,tmp_units,heal_amount}
    [/event]

    [event]
        name=victory

        {CLEAR_VARIABLE stored_moves}
    [/event]
#enddef

#define REPLAY_STORED_MOVES
    [event]
        name=side 3 turn
        first_time_only=no

        [while]
            [variable]
                name=stored_moves.moves.length
                greater_than=0
            [/variable]

            [variable]
                name=stored_moves.moves[0].turn_number
                equals="$($turn_number-$S.14b_start_turn)"
            [/variable]

            [do]
                [switch]
                    variable=stored_moves.moves[0].action

                    [case]  # Replay a move
                        value=move

                        [kill]
                            side=2
                            id=$stored_moves.moves[0].id
                        [/kill]

                        [move_unit_fake]
                            type=$stored_moves.moves[0].type
                            side=2
                            x=$stored_moves.moves[0].path_x
                            y=$stored_moves.moves[0].path_y
                        [/move_unit_fake]
                    [/case]

                    [case]  # Put unit onto map is it ends the move inside the overlap zone
                        value=place_unit

                        [unstore_unit]
                            variable=stored_moves.moves[0].unit
                            x,y=$stored_moves.moves[0].x,$stored_moves.moves[0].y
                        [/unstore_unit]

                        [capture_village]
                            side=2
                            x,y=$stored_moves.moves[0].x,$stored_moves.moves[0].y
                        [/capture_village]
                    [/case]

                    [case]  # Replay healing of units
                        value=healed

                        [heal_unit]
                            [filter]
                                id=$stored_moves.moves[0].id
                            [/filter]

                            amount=$stored_moves.moves[0].amount
                            animate=yes
                        [/heal_unit]
                    [/case]
                [/switch]

                {CLEAR_VARIABLE stored_moves.moves[0]} # This moves all indices down by one
            [/do]
        [/while]
    [/event]
#enddef
