#textdomain wesnoth-Grnk

#define GRNK_PART2 ID X Y FACING
    [unit]
        side=1
        id={ID}
        name=_"Grnk"
        type=Goblin Mage Neophyte
        x,y={X},{Y}
        facing={FACING}

        gender=male
        unrenamable=yes
        overlays=misc/hero-icon.png

        [modifications]
            {TRAIT_QUICK}
            {TRAIT_LOYAL}
        [/modifications]
    [/unit]
#enddef

#define WYSSAUBA_PART2 X Y FACING
    [unit]
        side=1
        id=Wyssauba
        name=_"Wyssauba"
        type=Mage of Light
        x,y={X},{Y}
        facing={FACING}

        gender=male
        unrenamable=yes
        canrecruit=yes
    [/unit]
#enddef

#define GROSSAUBA_PART2 X Y FACING
    [unit]
        side=1
        id=Grossauba
        name=_"Grossauba"
        type=Great Mage
        x,y={X},{Y}
        facing={FACING}

        gender=male
        unrenamable=yes
        canrecruit=yes
    [/unit]
#enddef

#define REMOVE_STAFF_S1 STAFF X Y OTHER_STAFF
    # Remove the staffs when a unit moves onto them or when Grnk gets within 2 hexes of them
    # @STAFF: number of the staff to be removed (1 or 2)
    # @X,@Y: coordinates of that staff
    # @OTHER_STAFF: number of the other staff (can be calculated easily, but ....)

    [event]
        name=moveto
        [filter]
            side=1
            x,y={X},{Y}
        [/filter]

        [fire_event]
            name=remove_staff{STAFF}
            [primary_unit]
                id=$unit.id
            [/primary_unit]
        [/fire_event]
    [/event]

    [event]
        name=moveto
        [filter]
            id=Grnk
            [filter_location]
                x,y={X},{Y}
                radius=2
            [/filter_location]
        [/filter]

        [if]
            [variable]
                name=S.prune_used
                not_equals=yes
            [/variable]

            [then]
                [fire_event]
                    name=remove_staff{STAFF}
                    [primary_unit]
                        id=Grnk
                    [/primary_unit]
                [/fire_event]
            [/then]
        [/if]
    [/event]

    [event]
        name=remove_staff{STAFF}

        # Prune effect
        [if]
            [variable]
                name=unit.x
                not_equals={X}
            [/variable]
            [or]
                [variable]
                    name=unit.y
                    not_equals={Y}
                [/variable]
            [/or]

            [then]
                {MESSAGE_RIGHT Grnk _"Don't fail me now, little prune."}
                {LEADING_HALO_PRUNES Grnk}
                {LEADING_HALO_PRUNES_HEX {X} {Y}}
                {VARIABLE S.prune_used yes}
            [/then]
        [/if]

        {REMOVE_IMAGE {X} {Y}}
        {PLACE_IMAGE "items/staff-broken.png" {X} {Y}}
        {CLEAR_VARIABLE S.staff{STAFF}}

        # IF the other one is still there
        [if]
            [variable]
                name=S.staff{OTHER_STAFF}
                equals=1
            [/variable]

            [then]
                {MESSAGE_RIGHT $unit.id _"I got one of them."}
            [/then]

            [else]
                {MESSAGE_RIGHT Grnk _"That should do it. Now we can finish them off."}
            [/else]
        [/if]
    [/event]
#enddef

#define WYSSAUBAS_HOUSE
    {PLACE_IMAGE "items/anvil.png" 1 16}
    {PLACE_IMAGE "items/armor.png" 14 4}
    {PLACE_IMAGE "items/armor.png" 15 5}
    {PLACE_IMAGE "items/armor.png" 16 5}
    {PLACE_IMAGE "items/armor.png" 17 6}
    {PLACE_IMAGE "items/armor.png" 18 6}
    {PLACE_IMAGE "items/armor-golden.png" 16 14}
    {PLACE_IMAGE "items/chest.png" 7 6}
    {PLACE_IMAGE "scenery/rock-cairn.png" 4 14}
#enddef

#define MASTERS_LAIR SIDE VIEWING_SIDE TEXT
    # Display the Master's lair.
    # @SIDE: the side of the Master's units
    # @VIEWING_SIDE: the player's side (to be able to shroud when setting up)
    # @TEXT: the dialog message to display when switching

    {SHROUD_DIALOG {VIEWING_SIDE} {TEXT}}

    [kill]
        x=1-999 # keep the ones on the recall list
    [/kill]

    [remove_item]
    [/remove_item]

    [replace_map]
        map="{~add-ons/Grnk/part2/maps/Masters_Lair.map}"
        shrink=yes
        expand=yes
    [/replace_map]

    [unit]
        type=Ancient Lich
        id=Master
        name=_"The Master"
        side={SIDE}

        x,y=25,4

        unrenamble=yes

        canrecruit=yes
        facing=sw
    [/unit]

    [unit]
        type=Necrophage
        id=Sklaf
        name=_"Sklaf"
        side={SIDE}

        x,y=26,5

        unrenamble=yes

        facing=nw
    [/unit]

    [if]
        [variable]
            name=stored_Grnd_S9s.length
            not_equals=0
        [/variable]

        [then]
            {VARIABLE stored_Grnd_S9s.side {SIDE}}
            {VARIABLE stored_Grnd_S9s.facing ne}
            [unstore_unit]
                variable=stored_Grnd_S9s
                x,y=23,5
            [/unstore_unit]

            {FULL_HEAL_AND_CURE (id=Grnd)}

            [redraw]
            [/redraw]
        [/then]
    [/if]

    {UNIT {SIDE} (Deathblade) 16 7 (facing=sw)}
    {UNIT {SIDE} (Bone Shooter) 16 9 (facing=sw)}
    {UNIT {SIDE} (Draug) 26 7 (facing=se)}
    {UNIT {SIDE} (Banebow) 32 4 (facing=nw)}
    {UNIT {SIDE} (Draug) 30 16 (facing=se)}

    {PLACE_IMAGE "items/anvil.png" 36 14}
    {PLACE_IMAGE "items/armor.png" 17 5}
    {PLACE_IMAGE "items/armor.png" 18 4}
    {PLACE_IMAGE "items/armor.png" 19 4}
    {PLACE_IMAGE "items/armor.png" 20 3}
    {PLACE_IMAGE "items/armor.png" 21 3}
    {PLACE_IMAGE "items/armor.png" 22 2}
    {PLACE_IMAGE "items/armor-golden.png" 21 13}
    {PLACE_IMAGE "items/chest.png" 28 4}
    {PLACE_IMAGE "scenery/rock-cairn.png" 33 13}

    {UNSHROUD {VIEWING_SIDE}}
    {SCROLL_TO 22 6}
#enddef

#define BURN_VILLAGE X Y
    [store_locations]
        x,y={X},{Y}
        variable=tmp_locs
    [/store_locations]

    # Get the new (burnt) terrain based on old base terrain
    {VARIABLE new_terrain Gd}
    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=H
        [/variable]

        [then]
            {VARIABLE new_terrain Hhd}
        [/then]
    [/if]

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=S
        [/variable]

        [then]
            {VARIABLE new_terrain Ss}
        [/then]
    [/if]

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=W
        [/variable]

        [then]
            {VARIABLE new_terrain Ww}
        [/then]
    [/if]

    [if]
        [variable]
            name=tmp_locs[0].terrain
            contains=R
        [/variable]

        [then]
            {VARIABLE new_terrain Rd}
        [/then]
    [/if]

    [terrain]
        x,y={X},{Y}
        terrain=$new_terrain
    [/terrain]

    [item]
        x,y={X},{Y}
        image=scenery/village-human-burned1.png
    [/item]

    {CLEAR_VARIABLE tmp_locs,new_terrain}
#enddef

#define RESET_MAP SUFFIX X_OFFSET Y_OFFSET SIDE CLEAR
    # Resets units, villages, images and bridges to the state they were between
    # scenarios that use the same map, such as S8/9 and S14/15
    # The information needs to be passed in variables stored_units_{SUFFIX},
    # stored_villages_{SUFFIX}, stored_items_{SUFFIX}, stored_bridges_{SUFFIX}
    # If only part of this is to be done, leave the other variables unassigned.
    #
    # @SIDE: set village ownership to this side; use 0 to keep as is
    # @CLEAR: set to 'yes' if the container variables are to be cleared

    [store_map_dimensions]
    [/store_map_dimensions]

    # Put the units back on the map
    {FOREACH stored_units_{SUFFIX} i_u}
        {VARIABLE RM_x "$($stored_units_{SUFFIX}[$i_u].x+{X_OFFSET})"}
        {VARIABLE RM_y "$($stored_units_{SUFFIX}[$i_u].y+{Y_OFFSET})"}

        {IF_ON_MAP $RM_x $RM_y (
            [unstore_unit]
                variable=stored_units_{SUFFIX}[$i_u]
                x,y=$RM_x,$RM_y
            [/unstore_unit]
        )}
    {NEXT i_u}

    # Set village ownerships back to what they used to be,
    # or to the side provided in {SIDE}
    {VARIABLE RM_to_side {SIDE}}
    {FOREACH stored_villages_{SUFFIX} i_v}
        {VARIABLE RM_x "$($stored_villages_{SUFFIX}[$i_v].x+{X_OFFSET})"}
        {VARIABLE RM_y "$($stored_villages_{SUFFIX}[$i_v].y+{Y_OFFSET})"}

        {IF_ON_MAP $RM_x $RM_y (
            [if]
                [variable]
                    name=RM_to_side
                    not_equals=0
                [/variable]

                [then]
                    {VARIABLE stored_villages_{SUFFIX}[$i_v].owner_side {SIDE}}
                [/then]
            [/if]

            [capture_village]
                side=$stored_villages_{SUFFIX}[$i_v].owner_side
                x,y=$RM_x,$RM_y
            [/capture_village]
        )}
    {NEXT i_v}
    {CLEAR_VARIABLE RM_to_side}

    # Restore the items, and re-burn villages
    {FOREACH stored_items_{SUFFIX} i_i}
        {VARIABLE RM_x "$($stored_items_{SUFFIX}[$i_i].x+{X_OFFSET})"}
        {VARIABLE RM_y "$($stored_items_{SUFFIX}[$i_i].y+{Y_OFFSET})"}

        {IF_ON_MAP $RM_x $RM_y (
            [item]
                image=$stored_items_{SUFFIX}[$i_i].image
                x,y=$RM_x,$RM_y
            [/item]

            [if]
                [variable]
                    name=stored_items_{SUFFIX}[$i_i].image
                    equals=scenery/village-human-burned1.png
                [/variable]

                [then]
                    {BURN_VILLAGE $RM_x $RM_y}
                [/then]
            [/if]
        )}
    {NEXT i_i}

    # Restore the bridges the orcs built in S14
    {FOREACH stored_bridges_{SUFFIX} i_b}
        {VARIABLE RM_x "$($stored_bridges_{SUFFIX}[$i_b].x+{X_OFFSET})"}
        {VARIABLE RM_y "$($stored_bridges_{SUFFIX}[$i_b].y+{Y_OFFSET})"}

        {IF_ON_MAP $RM_x $RM_y (
            [terrain]
                terrain=$stored_bridges_{SUFFIX}[$i_b].terrain
                x,y=$RM_x,$RM_y
            [/terrain]
        )}
    {NEXT i_b}

    {VARIABLE RM_clear {CLEAR}}
    [if]
        [variable]
            name=RM_clear
            equals=yes
        [/variable]

        [then]
            {CLEAR_VARIABLE stored_units_{SUFFIX},stored_villages_{SUFFIX},stored_items_{SUFFIX},stored_bridges_{SUFFIX}}
        [/then]
    [/if]

    {CLEAR_VARIABLE map_size,RM_x,RM_y,RM_clear}
#enddef

#define UNDEAD_THRU_PORTAL X Y SIDE FACING TO_X TO_Y
    # Bring an undead unit through the portal. Unit type is randomly
    # chosen from L2 and L3 skeletons.
    #
    # @X,@Y: coordinate of the portal
    # @SIDE: side of the unit coming through the portal
    # @FACING: the direction in which the unit faces when coming through
    # @@TO_X,@TO_Y: coordinate to which to move unit after coming through

    {RANDOM "1..4"} # Random unit type
    [switch]
        variable=random

        [case]
            value=1

            {VARIABLE UTP_type Revenant}
#ifver WESNOTH_VERSION < 1.13.0
            {VARIABLE UTP_image "units/undead-skeletal/revenant.png"}
#else
            {VARIABLE UTP_image "units/undead-skeletal/revenant/revenant.png"}
#endif
        [/case]

        [case]
            value=2

            {VARIABLE UTP_type "Bone Shooter"}
            {VARIABLE UTP_image "units/undead-skeletal/bone-shooter.png"}
        [/case]

        [case]
            value=3

            {VARIABLE UTP_type Draug}
            {VARIABLE UTP_image "units/undead-skeletal/draug.png"}
        [/case]

        [case]
            value=4

            {VARIABLE UTP_type Banebow}
            {VARIABLE UTP_image "units/undead-skeletal/banebow.png"}
        [/case]
    [/switch]

    {PORTAL_IN {SIDE} {X} {Y} "$UTP_image" {FACING}}

    {UNIT {SIDE} "$UTP_type" {X} {Y} (facing={FACING})}

    {CLEAR_VARIABLE random,UTP_type,UTP_image}

    {MOVE_UNIT (x,y={X},{Y}) {TO_X} {TO_Y}}
#enddef

#define BEAR_SIDE SIDE YRANGE_RANDOM XRANGE_COORD YRANGE_COORD NOT_XY
    # Set up the AI side for the bear in S8 and S9.
    # This is specialized to those scenarios, won't work in general.
    # Bear always moves in on the left (x=1) for the y ranges given
    # in the macro arguments.
    #
    # @YRANGE_RANDOM: range of y coordinates for bear to appear in RANDOM macro format
    # @X/YRANGE_COORDS: range of x/y coordinates for bear to leave in x,y= key format
    # @NOT_XY: a coordinate which to avoid (with radius=7), to keep from keeps etc.
    #
    # Example: {BEAR_SIDE 3 "1..7,13..16,20..27" "2-5,2-5,2-5" "1-7,13-16,20-27"}

    [event]
        name=prestart

        [micro_ai]
            side={SIDE}
            ai_type=big_animals
            action=add

            ca_score=90000
            [filter]
                type=Bear
            [/filter]
            [filter_location]
                x,y=1-18,1-36 # Works for both S8 and S9
                terrain=M*,H*,H*^*
                [not]
                    x,y={NOT_XY}
                    radius=7
                [/not]
            [/filter_location]
        [/micro_ai]
    [/event]

    # 50% chance of getting a new bear each turn if there is none.
    # This happens before the "remove bear" event so that we do
    # not immediately create a new bear on the same turn the old one left.
    [event]
        name=side {SIDE} turn
        first_time_only=no

        [if]
            [have_unit]
                side={SIDE}
                type=Bear
                count=0
            [/have_unit]

            [then]
                {RANDOM "1..2"}
                [if]
                    [variable]
                        name=random
                        equals=1
                    [/variable]

                    [then]
                        {RANDOM {YRANGE_RANDOM}}

                        {SCROLL_TO 1 $random}
                        {MOVE_UNIT_ONTO_MAP {SIDE} Bear 1 $random ne (id=bear)}

                        {SOUND wolf-growl-1.ogg}
                        {MESSAGE bear "" "" _"Grrrrrrwwwllll !!!"}
                    [/then]
                [/if]

                {CLEAR_VARIABLE random}
            [/then]
        [/if]
    [/event]

    # 50% chance of moving bear off the map if it's inside X/YRANGE_COORDS.
    # This happens after the "new bear" event. Removing a new bear immediately
    # is avoided by excluding hexes with x=1 in X/YRANGE_COORDS.
    [event]
        name=side {SIDE} turn refresh
        first_time_only=no

        [if]
            [have_unit]
                side={SIDE}
                type=Bear
                x={XRANGE_COORD}
                y={YRANGE_COORD}
            [/have_unit]

            [then]
                {RANDOM "1..2"}

                [if]
                    [variable]
                        name=random
                        equals=1
                    [/variable]

                    [then]
                        [store_unit]
                            [filter]
                                id=bear
                            [/filter]

                            variable=tmp_bear
                        [/store_unit]

                        {MOVE_UNIT (id=bear) 1 $tmp_bear.y}
                        {CLEAR_VARIABLE tmp_bear}

                        {SOUND wolf-growl-1.ogg}
                        {MESSAGE bear "" "" _"Grrrrrrwwwllll !!!"}

                        {MOVE_UNIT_OFF_MAP bear sw}
                    [/then]
                [/if]

                {CLEAR_VARIABLE random}
            [/then]
        [/if]
    [/event]
#enddef
