#textdomain wesnoth-Grnk

#define PEASANT_SIDE PEASANT_SIDE TEAM_NAME
    # Setting up the side
    # Peasants
    [side]
        side={PEASANT_SIDE}
        controller=ai
        no_leader=yes

        team_name={TEAM_NAME}
        user_team_name=_"Peasants"

        hidden=yes

        gold=0
        income=-2
    [/side]
#enddef

#define PEASANT_EVENTS PEASANT_SIDE GRNK_SIDE VILLAGE_TYPE PEASANT_CHANCE
    # This is a collection of events that need to be inserted into each scenario,
    # in which the peasants are supposed to spring out

    # Triggering the peasants;
    # PEASANT_CHANCE give # of peasants to draw from.
    #   E.g "-1..2": 50% chance of 1 or 2 vs. none; "1": 100% chance of exactly one
    # This means peasants will only come out the first time a unit on Grnk's side
    # moves onto a village, unless it is retaken by another side
    [event]
        name=capture
        first_time_only=no

        [filter]
            side={GRNK_SIDE}
            [filter_location]
                terrain={VILLAGE_TYPE}
            [/filter_location]
        [/filter]

        {RANDOM {PEASANT_CHANCE}} # number of peasants
        {REPEAT $random (
            {CLOSE_EMPTY_HEX $x1 $y1 (*^V*) 1}
            [move_unit_fake]
                type=Peasant
                side={PEASANT_SIDE}
                x=$x1,$hex_x
                y=$y1,$hex_y
            [/move_unit_fake]
            {GENERIC_UNIT {PEASANT_SIDE} Peasant $hex_x $hex_y}

            {STORE_UNIT_VAR (x,y=$hex_x,$hex_y) id tmp_id}
            [adjust_facing]
                id=$tmp_id
                second_id=$unit.id
            [/adjust_facing]
        )}
        {CLEAR_VARIABLE hex_x,hex_y,tmp_id}

        {IF_VAR random greater_than 0 (
            [then]
                {RANDOM "0..3"}
                [switch]
                    variable=random
                    [case]
                        value=0
                        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Farmer" _"What do you want from us? Why don't you just leave us alone?"}
                    [/case]
                    [case]
                        value=1
                        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Farmer" _"Who are you? What do you want from us?"}
                    [/case]
                    [case]
                        value=2
                        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Farmer" _"Please, just leave us alone. We don't want any trouble."}
                    [/case]
                    [case]
                        value=3
                        {MESSAGE narrator portraits/humans/transparent/peasant.png _"Farmer" _"Away, you stinking ... Oh, who are you?"}
                    [/case]
                [/switch]
            [/then]
        )}
        {CLEAR_VARIABLE random}
    [/event]

    # At the beginning of each turn, each peasant is trying to get back
    # to the closest village, if it is within his reach
    # This will not change ownership of the village
    [event]
        name=side {PEASANT_SIDE} turn refresh
        first_time_only=no

        [store_unit]
            [filter]
                side={PEASANT_SIDE}
            [/filter]
            variable=stored_peasants
        [/store_unit]

        {FOREACH stored_peasants i_p}
            # See if there is an unoccupied village close by
            [store_reachable_locations]
                [filter]
                    id=$stored_peasants[$i_p].id
                [/filter]
                [filter_location]
                    terrain=*^V*
                    [not]
                        [filter]
                        [/filter]
                    [/not]
                [/filter_location]
                moves=max
                variable=close_villages
            [/store_reachable_locations]
            #{DEBUG "Number of reachable villages: $close_villages.length"}

            # If there are reachable villages, kill and move fake unit to first of those
            {IF_VAR close_villages.length not_equals 0 (
                [then]
                    #{MESSAGE $stored_peasants[$i_p].id "" "" _"I'm leaving!!"}
                    [kill]
                        id=$stored_peasants[$i_p].id
                    [/kill]
                    [move_unit_fake]
                        type=$stored_peasants[$i_p].type
                        side={PEASANT_SIDE}
                        x=$stored_peasants[$i_p].x,$close_villages[0].x
                        y=$stored_peasants[$i_p].y,$close_villages[0].y
                    [/move_unit_fake]
                [/then]
            )}
        {NEXT i_p}
        {CLEAR_VARIABLE stored_peasants,close_villages}
    [/event]

    # When peasant is attacked by unit on Grnk's side
    [event]
        name=attack end
        first_time_only=no
        [filter]
            side={GRNK_SIDE}
            [not]
                id=Grnk
            [/not]
        [/filter]
        [filter_second]
            side={PEASANT_SIDE}
        [/filter_second]

        # If dead, remove the peasant at this point, rather than after the talking
        #{DEBUG "Peasant hp: $second_unit.hitpoints"}
        {IF_VAR second_unit.hitpoints less_than 1 (
            [then]
                [kill]
                    id=$second_unit.id
                    animate=yes
                [/kill]
            [/then]
        )}

        # In Scenario 8, Grnk finally had enough, so there's an 'if' here
        {IF_VAR S8.Grnk_had_enough not_equals yes (
            [then]
                [switch]
                    variable=peasants.times_attacked
                    [case]
                        value=0
                        {MESSAGE Grnk "" "" _"What did you do that for?"}
                        {MESSAGE $unit.id "" "" _"He's an orc collaborator, otherwise he would have long ago been killed out here. He's getting what he deserves."}
                        {MESSAGE Grnk "" "" _"He's just a poor farmer trying to get by somehow."}
                    [/case]
                    [case]
                        value=1
                        {MESSAGE Grnk "" "" _"Please don't do that."}
                    [/case]
                    [case]
                        value=2
                        {MESSAGE $unit.id "" "" _"Take that, traitor!"}
                        {MESSAGE Grnk "" "" _"Don't! You have no idea how hard it is to survive as a farmer in these parts."}
                        {MESSAGE $unit.id "" "" _"But you do?"}
                        {MESSAGE Grnk "" "" _"That's right. I do."}
                    [/case]
                    [case]
                        value=3
                        {MESSAGE Grnk "" "" _"Stop doing that or ..."}
                        {MESSAGE $unit.id "" "" _"Or what?"}
                        {MESSAGE Grnk "" "" {GASP _"grumbles"}}
                    [/case]
                    [else]
                        {MESSAGE Grnk "" "" _"I really wish you'd stop doing that."}
                    [/else]
                [/switch]
                {VARIABLE_OP peasants.times_attacked add 1}
            [/then]
            [else]
                # Don't need this variable any more
                {CLEAR_VARIABLE peasants.times_attacked}
                # End of scenario 8
                [fire_event]
                    name=S8_done
                    [primary_unit]
                        id=$unit.id
                    [/primary_unit]
                [/fire_event]
            [/else]
        )}
    [/event]

    # When peasant is attacked by Grnk
    [event]
        name=attack
        first_time_only=no
        [filter]
            id=Grnk
        [/filter]
        [filter_second]
            side={PEASANT_SIDE}
        [/filter_second]

        {MESSAGE Grnk "" "" _"I just cannot do it!"}
        # Interrupt the attack
        {MODIFY_UNIT id=Grnk underlying_id XXXX}
        # And give him his attack back (but not his moves)
        {MODIFY_UNIT id=Grnk attacks_left 1}
    [/event]
#enddef
