#textdomain wesnoth-Grnk

# wmllint: local spelling pickpocketing

#define PICKPOCKET_MESSAGE
    _"Pickpocket is a special attack that does no damage, but, if successful, yields some gold instead. The higher the level of the enemy unit, the more gold the thief is likely to gain. Some races carry more gold than others (on average), while some unit types carry no money at all.

Work as a pickpocket is not without danger. If an attack succeeds, the opposing unit will not notice and not even flinch. However, an unsuccessful attempt results in the enemy hitting back without the thief being able to defend himself.

Repeated thefts within the same scenario draw people's attention. The probability of success therefore decreases with each attempt, successful or not, down to a minimum of 30%. The current probability of success can be found in the attack window or by right-clicking on the map.

As being caught stealing from an allied unit could have dire consequences, only enemy units' pockets can be picked."#enddef

#define SET_MENU_PICKPOCKET
    # Set menu item: pickpocketing
    [set_menu_item]
        id=m09_menu_picking
        description=_"Pickpocketing Probability: $picking_probability%"
        image=attacks/fist-human.png~CROP(5,13,48,40)~SCALE(24,20)
        [show_if]
        [/show_if]
        [command]
            {NARRATOR_GRAY "Grnk's Pickpocket Attack" {PICKPOCKET_MESSAGE}}
        [/command]
    [/set_menu_item]
#enddef

#define CLEAR_MENU_PICKPOCKET
    # Disable menu item: pickpocketing
    [set_menu_item]
        id=m09_menu_picking
        [show_if]
            [not]
            [/not]
        [/show_if]
    [/set_menu_item]
#enddef

#define PICKPOCKET FILTER
    # Give filtered unit the pickpocket special
    [object]
        id=pickpocket
        name=_"Pickpocket"
        image=attacks/fist-human.png
        duration=forever
        silent=yes
        description={PICKPOCKET_MESSAGE}
        [filter]
            {FILTER}
        [/filter]
        [effect]
            apply_to=new_attack
            name=pickpocket
            description=_"pickpocket"
            type=impact
            range=melee
            damage=0
            number=1
            icon=attacks/fist-human.png
            [specials]
                [chance_to_hit]
                    id=pickpocket
                    name=_"pickpocket"
                    description=_"Right-click on map for details"
                    value=$picking_probability
                [/chance_to_hit]
            [/specials]
        [/effect]
    [/object]
#enddef

#define PICKPOCKET_EVENTS FILTER
    # This is a collection of events that need to be inserted into each scenario,
    # in which this attack is enabled for the filtered unit
    # FILTER: filter for the unit which has the attack
    #   Prestart: Reset chance of pickpocket attack to 80% at beginning of scenario
    #   Attack: the pickpocketing event itself
    #   Advance: reset probability to current value, otherwise it's 80% again

    # Prestart: reset probability
    [event]
        name=prestart

        # Modify unit; need to keep the 'picking_probability' variable, don't clear it afterward
        {VARIABLE picking_probability 80}
        # If unit already has pickpocket, reset probability
        [if]
            [have_unit]
                {FILTER}
                has_weapon=pickpocket
            [/have_unit]
            [then]
                [store_unit]
                    [filter]
                        {FILTER}
                    [/filter]
                    variable=pp_unit
                [/store_unit]
                {LOOKUP_INDEX pp_unit.attack name pickpocket attack_index}
                {MODIFY_UNIT {FILTER} attack[$attack_index].specials.chance_to_hit.value $picking_probability}
                {CLEAR_VARIABLE pp_unit,attack_index}
            [/then]
        [/if]

        # Also need to reset the menu
        [set_menu_item]
            id=m09_menu_picking
            description=_"Pickpocketing Probability: $picking_probability%"
        [/set_menu_item]
    [/event]

    # The actual pickpocketing event
    [event]
        name=attack
        first_time_only=no
        [filter_attack]
            name=pickpocket
        [/filter_attack]

        # Even though this is set up as a "standard" attack, I deal
        # with this directly here in the case of a successful pick, in order
        # to have the animations work the way I want them to
        # For unsuccessful attack, we just let the attack play itself out
        {RANDOM 0..99}
        {IF_VAR random less_than $picking_probability (
            [then]
                # Play the attack animation (but no defense, that's why it's done this way)
                [delay]
                    time=10
                [/delay]
                [animate_unit]
                    flag=attack
                    with_bars=yes
                    [filter]
                        id=$unit.id
                    [/filter]
                    [primary_attack]
                        name=pickpocket
                    [/primary_attack]
                    hits=no
                    [facing]
                        [filter]
                            id=$second_unit.id
                        [/filter]
                    [/facing]
                [/animate_unit]

                # First: some units don't carry money:
                # Races: bats, mechanicals, monsters, woses
                # Unit types: gryphons and wolves (without riders)
                [if]
                    {VARIABLE_CONDITIONAL second_unit.race equals bats}
                    [or]
                        {VARIABLE_CONDITIONAL second_unit.race equals mechanical}
                    [/or]
                    [or]
                        {VARIABLE_CONDITIONAL second_unit.race equals monster}
                    [/or]
                    [or]
                        {VARIABLE_CONDITIONAL second_unit.race equals wose}
                    [/or]
                    [or]
                        {VARIABLE_CONDITIONAL second_unit.type equals Gryphon}
                    [/or]
                    [or]
                        {VARIABLE_CONDITIONAL second_unit.type equals Wolf}
                    [/or]
                    [then]
                        {NARRATOR_GRAY "" _"Did you really try to steal money from this $second_unit.type|?!? How much gold do you think it carries?"}
                    [/then]
                    [else]
                        # If the unit does have money
                        # Play a sound
                        {SOUND gold.ogg}

                        # Calculate amount of gold
                        # Base amount (x10)
                        # This means (default, can be change in variables):
                        # Level 0: 0-2; for some races: 0-3
                        # Level 1: 1-3; for some races: 1-4
                        # Level 2: 2-4; for some races: 3-6
                        # LEvel 3: 3-5; for some races: 4-7

                        {RANDOM "$Money.pickpocket_base"}
                        {VARIABLE pp_gold_amount $random}
                        # Plus 10 per level
                        {VARIABLE_OP pp_gold_amount add "$($second_unit.level*$Money.pickpocket_per_level)"}
                        # Humans, elves, and dwarves carry a bit more than other races
                        [if]
                            {VARIABLE_CONDITIONAL second_unit.race equals human}
                            [or]
                                {VARIABLE_CONDITIONAL second_unit.race equals elf}
                            [/or]
                            [or]
                                {VARIABLE_CONDITIONAL second_unit.race equals dwarf}
                            [/or]
                            [then]
                                {VARIABLE_OP pp_gold_amount multiply $Money.pickpocket_multiplier}
                            [/then]
                        [/if]
                        # Finally, divide by 10 and round
                        {VARIABLE_OP pp_gold_amount divide 10}
                        {VARIABLE_OP pp_gold_amount round 0}
                        #{DEBUG "Gold: $pp_gold_amount"}

                        # Display as floating text (in color 'gold')
                        [floating_text]
                            x,y=$x1,$y1
                            text=_"<span color='gold'>$pp_gold_amount </span>"
                        [/floating_text]
                        # Add to Grnk's personal account (and update menu)

                        {VARIABLE_OP Grnks_gold add $pp_gold_amount}
                        {SET_MENU_INVENTORY}
                        # Only add to side gold if the unit is the leader
                        {IF_VAR unit.canrecruit equals yes (
                            [then]
                                #{DEBUG "($unit.name is side leader; gold put into side gold"}
                                [gold]
                                    side=1
                                    amount=$pp_gold_amount
                                [/gold]
                            [/then]
                        )}
                        {CLEAR_VARIABLE pp_gold_amount}
                    [/else]
                [/if]

                # Finally, in order to keep the second unit from fighting back
                # need to change its 'underlying_id'
                {MODIFY_UNIT id=$second_unit.id underlying_id ()}
            [/then]
        )}

        # Chance of successful pick is reduced afterward
        # (no matter if this one succeeded or not)
        # but cannot go below 30%
        {IF_VAR picking_probability greater_than 30 (
            [then]
                {VARIABLE_OP picking_probability add -10}
            [/then]
        )}
        {LOOKUP_INDEX unit.attack name pickpocket attack_index}
        {MODIFY_UNIT id=$unit.id attack[$attack_index].specials.chance_to_hit.value $picking_probability}
        {CLEAR_VARIABLE attack_index}
        [set_menu_item]  # Also need to update this in the menu
            id=m09_menu_picking
            description=_"Pickpocketing Probability: $picking_probability%"
        [/set_menu_item]

        {CLEAR_VARIABLE random}  # This is used several times in this event
    [/event]

    # Need to reset the picking probability to the current value after
    # advancement, otherwise it starts with the original value
    [event]
        name=post advance
        first_time_only=no
        [filter]
            {FILTER}
        [/filter]

        {LOOKUP_INDEX unit.attack name pickpocket attack_index}
        {MODIFY_UNIT {FILTER} attack[$attack_index].specials.chance_to_hit.value $picking_probability}
        {CLEAR_VARIABLE attack_index}
    [/event]

    # Clear picking_probability on exit
    [event]
        name=victory

        {CLEAR_VARIABLE picking_probability}
    [/event]
#enddef
