#textdomain wesnoth-Grnk

############################################################################
# The EXTRA_ANIM_* macros are for playing new animations for units or on   #
# hexes using the [extra_anim] tags. Empty hexes are dealt with by putting #
# an invisible unit there.                                                 #
############################################################################

#define EXTRA_ANIM_UNIT_NO_STORE ID ANIM_WML
    # Play animation for a unit; it is assumed that the unit is already
    # stored in a variable when this macro is called. Reasons might be to avoid
    # overhead if the unit is already stored, or because storing is unnecessary
    # because it will be killed at the end anyway.
    # @ID: id of the unit
    # @ANIM_WML: WML code to go into the [extra_anim] tag, excl. the flag

    [object]
        silent=yes

        [filter]
            id={ID}
        [/filter]

        [effect]
            apply_to=new_animation

            [extra_anim]
                flag=EAU_animation
                {ANIM_WML}
            [/extra_anim]
        [/effect]
    [/object]

    [animate_unit]
        [filter]
            id={ID}
        [/filter]

        flag=EAU_animation
    [/animate_unit]
#enddef

#define EXTRA_ANIM_UNIT ID ANIM_WML
    # Play animation for a unit. Unlike EXTRA_ANIM_UNIT_NO_STORE, this stores
    # the unit into variable EA_unit first and unstores is afterward to
    # remove the animation from the unit again.
    # @ID: id of the unit
    # @ANIM_WML: WML code to go into the [extra_anim] tag, excl. the flag

    [store_unit]
        [filter]
            id={ID}
        [/filter]

        variable=EAU_unit
    [/store_unit]

    {EXTRA_ANIM_UNIT_NO_STORE {ID} {ANIM_WML}}

    [unstore_unit]
        variable=EAU_unit
    [/unstore_unit]

    {CLEAR_VARIABLE EAU_unit}
#enddef

#define EXTRA_ANIM_HEX X Y FACING ANIM_WML
    # Play an animation on a hex. If a unit is already on the hex, macro
    # EXTRA_ANIM_UNIT_NO_STORE is used, otherwise an invisible unit
    # is temporarily placed there.
    # @x,@Y: coordinates of the hex
    # @FACING: facing of the unit; only relevant if the animation includes offsets
    # @ANIM_WML: WML code to go into the [extra_anim] tag, excl. the flag

    [store_unit]
        [filter]
            x,y={X},{Y}
        [/filter]

        variable=EAH_unit
    [/store_unit]

    [if]
        [variable]
            name=EAH_unit.length
            equals=0
        [/variable]

        [then]
            # If hex is empty, place an invisible unit there
            # Is set to be an enemy of all human controlled sides, or Side 1 if
            # no such side exists. In the later case, the ally-orb will show
            # up briefly at the beginning of the animation

            [store_side]
                [enemy_of]
                    controller=human
                [/enemy_of]

                variable=EAH_sides
            [/store_side]

            [if]
                [variable]
                    name=EAH_sides.length
                    equals=0
                [/variable]

                [then]
                    {VARIABLE EAH_side 1}
                [/then]

                [else]
                    {VARIABLE EAH_side $EAH_sides[0].side}
                [/else]
            [/if]

            [unit]
                id=EAH_unit_id
                type=Invisible Unit

                x,y={X},{Y}
                side=$EAH_side
                facing={FACING}

                [modifications]
                    [object]
                        [effect]
                            apply_to=new_animation

                            [extra_anim]
                                flag=EAH_animation
                                {ANIM_WML}
                            [/extra_anim]
                        [/effect]
                    [/object]
                [/modifications]
            [/unit]

            {CLEAR_VARIABLE EAH_sides,EAH_side}

            # Now make the unit visible (so that the animation can be seen)
            # Cannot use [role] here because it does not change the display right away
            [modify_unit]
                [filter]
                    id=EAH_unit_id
                [/filter]

                role=IU_visible
            [/modify_unit]

            [animate_unit]
                [filter]
                    id=EAH_unit_id
                [/filter]

                flag=EAH_animation
            [/animate_unit]

            [kill]
                id=EAH_unit_id
            [/kill]
        [/then]

        [else]
            {EXTRA_ANIM_UNIT_NO_STORE $EAH_unit.id {ANIM_WML}}

            [unstore_unit]
                variable=EAH_unit
            [/unstore_unit]

            {CLEAR_VARIABLE EAH_unit}
        [/else]
    [/if]
#enddef

#################################################
# The (for the most part) pure animation macros #
#################################################

#define WHITE_MISSILE ID IPF
    # White missile animation
    # @ID: the id of the unit
    # @IPF: the image path function to use for the projectile (not the unit)

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo=projectiles/whitemissile-impact-[1~6].png{IPF}:75
            sound=dragonstick.ogg
        [/frame]
    )}
#enddef

#define WHITE_MISSILE_KILL ID IPF
    # Play white missile animation on a unit plus fading out of the unit
    # and kill at end

    {EXTRA_ANIM_UNIT {ID} (
        alpha=1~0.3:150,0.3~0:150,0:150
        [frame]
            image=$EAU_unit.image:450
            halo=projectiles/whitemissile-impact-[1~6].png{IPF}:75
            sound=dragonstick.ogg
        [/frame]
    )}

    [kill]
        id={ID}
    [/kill]
#enddef

#define WHITE_MISSILE_HEX X Y IPF
    # White missile animation on a hex
    # @IPF: the image path function to use for the projectile (not the unit)

    {EXTRA_ANIM_HEX {X} {Y} se (
        [frame]
            halo=projectiles/whitemissile-impact-[1~6].png{IPF}:75
            sound=dragonstick.ogg
        [/frame]
    )}
#enddef

#define LEADING_HALO_PRUNES ID
    # Play leading Halo animation on a unit, always in prune colors

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo="halo/misc/leadership-flare-[1~8].png~CROP(0,20,72,52)~SCALE(0,120)~CS(0,-50,0):150"
            sound=entangle.wav
        [/frame]
    )}
#enddef

#define LEADING_HALO_PRUNES_HEX X Y
    # Play leading Halo animation on a hex that might or might not have a unit
    # on it, always in prune colors

    {EXTRA_ANIM_HEX {X} {Y} se (
        [frame]
            halo="halo/misc/leadership-flare-[1~8].png~CROP(0,20,72,52)~SCALE(0,120)~CS(0,-50,0):150"
            sound=entangle.wav
        [/frame]
    )}
#enddef

#define PUFF_PRUNES ID
    # Play a puff animation on a unit, always in prune colors

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo="projectiles/fireball-fail-[1~7].png~GS()~CS(100,50,100):150"
            sound=torch-miss.ogg
        [/frame]
    )}
#enddef

#define LIGHT_BEAM ID
    # Play a light beam animation on a unit

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo="halo/holy/light-beam-[1~6].png:75,halo/holy/light-beam-7.png:200,halo/holy/light-beam-[6~1].png:75"
            sound=magic-holy-1.ogg
        [/frame]
    )}
#enddef

#define QUICKBURST_PRUNES ID
    # Play a quickburst animation on a unit, always in prune colors

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo="projectiles/fire-breath-[1~7].png~GS()~CS(50,0,50):50"
            sound=fire.wav
        [/frame]
    )}
#enddef

#define TELEPORT_ANIM_OUT ID IPF
    # Play a teleport-away animation on a unit
    # Kill the unit at the end.

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            halo="halo/teleport-[9~1].png{IPF}:150"
            sound=entangle.wav
        [/frame]
    )}

    [kill]
        id={ID}
    [/kill]
#enddef

#define TELEPORT_ANIM_IN X Y IPF
    # Play a teleport-in animation on a hex

    {EXTRA_ANIM_HEX {X} {Y} se (
        [frame]
            halo="halo/teleport-[1~9].png{IPF}:150"
            sound=entangle.wav
        [/frame]
    )}
#enddef

#define FIREBALL_IN SIDE X Y IMAGE FACING IPF
    # Play fading-in animation for a unit together with a fireball
    # @SIDE: side of the unit to fade in (for team coloring)
    # @X,@Y: the location where
    # @IMAGE: the image to use for the animation
    # @FACING: the direction in which the unit should be facing
    # @IPF: image path function

    {EXTRA_ANIM_HEX {X} {Y} {FACING} (
        alpha=0~0.5:700,0.5~1:300
        [frame]
            image="{IMAGE}~TC({SIDE},magenta):1000"
            halo=projectiles/fireball-impact-[1~16].png{IPF}:60
            halo_y=-24
            sound=fire.wav
        [/frame]
    )}
#enddef

#define FIREBALL_OUT_CORE ID IPF
    {EXTRA_ANIM_UNIT {ID} (
        alpha=1~0.5:300,0.5~0:500,0:200
        [frame]
            image=$EAU_unit.image:1000
            halo=projectiles/fireball-impact-[1~16].png{IPF}:60
            halo_y=-24
            sound=fire.wav
        [/frame]
    )}
#enddef

#define FIREBALL_OUT ID IPF
    # Play fading-out animation for a unit together with a fireball
    # Kill the unit at the end
    # @ID: the id of the unit
    # @IPF: image path function

    {FIREBALL_OUT_CORE {ID} {IPF}}

    [kill]
        id={ID}
    [/kill]
#enddef

#define FIREBALL_OUT_HIDE ID IPF
    # Same as FIREBALL_OUT, but hide unit at end, rather than killing it

    {FIREBALL_OUT_CORE {ID} {IPF}}

    [hide_unit]
        id={ID}
    [/hide_unit]
#enddef

#define FIREBALL_KILL ID
    # Kill a unit with a fireball and blackening animation
    # @ID: the id of the unit

    {EXTRA_ANIM_UNIT {ID} (
        blend_color=0,0,0
        blend_ratio=0~1:600,1:400
        alpha=1:600,1~-0.5:400
        [frame]
            image=$EAU_unit.image:1000
            halo=projectiles/fireball-impact-[1~16].png:60
            halo_y=-12
            sound=fire.wav
        [/frame]
    )}

    [kill]
        id={ID}
        fire_event=yes
    [/kill]
#enddef

#define FIREBALL X Y IPF
    # Fireball animation on a hex
    # IPF: image path function

    {EXTRA_ANIM_HEX {X} {Y} se (
        [frame]
            halo="projectiles/fireball-impact-[1~16].png{IPF}:60"
            halo_y=-12
            sound=fire.wav
        [/frame]
    )}
#enddef

#define FIREBALL_UNDEAD_CORE ID IN_TIME IN_ALPHA OUT_TIME OUT_ALPHA
    # Core code for the FIREBALL_UNDEAD_IN and FIREBALL_UNDEAD_OUT macros
    # Do not call this directly
    [store_unit]
        [filter]
            id={ID}
        [/filter]

        variable=FU_tmp_unit
    [/store_unit]

    [set_variable]
        name=FU_skeleton1
        rand=skeleton/skeleton.png,archer.png,banebow.png,bone-shooter.png,deathblade.png,draug.png,revenant.png
    [/set_variable]
    [set_variable]
        name=FU_skeleton2
        rand=skeleton/skeleton.png,archer.png,banebow.png,bone-shooter.png,deathblade.png,draug.png,revenant.png
    [/set_variable]
    [set_variable]
        name=FU_master_sklaf1
        rand=undead-necromancers/ancient-lich.png,undead/ghast.png
    [/set_variable]
    [set_variable]
        name=FU_master_sklaf2
        rand=undead-necromancers/ancient-lich.png,undead/ghast.png
    [/set_variable]

    [object]
        silent=yes

        [filter]
            id={ID}
        [/filter]

        [effect]
            apply_to=new_animation

            [extra_anim]
                flag=fireball_undead
                [frame]
                    image=$FU_tmp_unit.image:{IN_TIME}
                    halo=projectiles/fireball-impact-1.png~GS():{IN_TIME}
                    halo_y=-24
                    alpha={IN_ALPHA}
                    sound=fire.wav
                [/frame]
                [frame]
                    image=units/undead-skeletal/$FU_skeleton1:300
                    halo=projectiles/fireball-impact-[2~3].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=$FU_tmp_unit.image:300
                    halo=projectiles/fireball-impact-[4~5].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=units/$FU_master_sklaf1:300
                    halo=projectiles/fireball-impact-[6~7].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=$FU_tmp_unit.image:300
                    halo=projectiles/fireball-impact-[8~9].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=units/undead-skeletal/$FU_skeleton2:300
                    halo=projectiles/fireball-impact-[10~11].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=$FU_tmp_unit.image:300
                    halo=projectiles/fireball-impact-[12~13].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=units/$FU_master_sklaf2:300
                    halo=projectiles/fireball-impact-[14~15].png~GS():150
                    halo_y=-24
                    alpha=0~1:150,1~0:150
                [/frame]
                [frame]
                    image=$FU_tmp_unit.image:{OUT_TIME}
                    halo=projectiles/fireball-impact-[16].png~GS():{OUT_TIME}
                    halo_y=-24
                    alpha={OUT_ALPHA}
                [/frame]
            [/extra_anim]
        [/effect]
    [/object]

    [animate_unit]
        [filter]
            id={ID}
        [/filter]

        flag=fireball_undead
    [/animate_unit]

    [unstore_unit]
        variable=FU_tmp_unit
    [/unstore_unit]

    {CLEAR_VARIABLE FU_tmp_unit,FU_skeleton1,FU_skeleton2,FU_master_sklaf1,FU_master_sklaf2}
#enddef

#define FIREBALL_UNDEAD_IN SIDE UNIT_VARIABLE X Y FACING
    # Bring in a unit with fireball and going through a number of undead
    # unit types.
    # @SIDE: side on which the unit is supposed to be (can be different from that stored in the variable)
    # @UNIT_VARIABLE: name of the variable in which the unit is stored; the variable
    #   will not be cleared by the macro, can be used again later, if desired
    # @X,@Y: hex where to bring out the unit
    # @FACING: direction into which the unit is supposed to face

    {VARIABLE {UNIT_VARIABLE}.side {SIDE}}
    {VARIABLE {UNIT_VARIABLE}.facing {FACING}}
    [unstore_unit]
        variable={UNIT_VARIABLE}
        x,y={X},{Y}
    [/unstore_unit]

    {FIREBALL_UNDEAD_CORE ${UNIT_VARIABLE}.id 300 "0~1:150,1~0:150" 150 "0~1:150"}
#enddef

#define FIREBALL_UNDEAD_OUT ID
    # Fade out a unit while going through a number of undead unit types
    # @ID: the id of the unit; must be on the map
    {FIREBALL_UNDEAD_CORE {ID} 150 "1~0:150" 300 "0~1:150,1~0:150"}

    [kill]
        id={ID}
    [/kill]
#enddef

#########################################
# Moving units over the map edge macros #
#########################################

#define MOVE_UNIT_ONTO_MAP SIDE TYPE X Y FACING UNIT_WML
    # Animate a unit onto the map from beyond the edge
    #
    # Unit parameters which always need to be given:
    #  @SIDE: side of unit; needs to be an enemy side for the player, otherwise
    #    the ellipse will blip in briefly. This can be modified after the unit
    #    is placed on the map
    #  @TYPE: unit type
    #  @X, @Y: position where the unit appears, needs to be at the edge of the map
    #  @FACING: unit will appear on the map moving in this direction
    #
    # @UNIT_WML: other, optional keys that can be specified for the unit

    # Create the unit into a variable
    [unit]
        side={SIDE}
        type={TYPE}
        x,y={X},{Y}
        facing={FACING}

        {UNIT_WML}

        to_variable=MUOM_new_unit
    [/unit]

    {EXTRA_ANIM_HEX {X} {Y} {FACING} (
        offset=-2~0:400
        [frame]
            image="$MUOM_new_unit.image~TC({SIDE},magenta):400"
        [/frame]
    )}

    # Place the real unit
    [unstore_unit]
        variable=MUOM_new_unit
        find_vacant=no
    [/unstore_unit]

    {CLEAR_VARIABLE MUOM_new_unit}
#enddef

#define MOVE_UNIT_OFF_MAP_CORE ID FACING WML
    # Core macro for MOVE_UNIT_OFF_MAP and MOVE_UNIT_TO_EDGE_AND_OFF_MAP
    # Do not use this by itself
    # @WML: code to be added before moving the unit off the map

    # !!!! Do not use the EXTRA_ANIM macros here, so that there is as little
    # !!!! as possible of a gap between moving the extra WML and moving the unit off

    [store_unit]
        [filter]
            id={ID}
        [/filter]

        variable=MUOM_unit
    [/store_unit]

    [object]
        silent=yes

        [filter]
            id={ID}
        [/filter]

        [effect]
            apply_to=new_animation

            [extra_anim]
                flag=disappear
                offset=0~2:400
                [frame]
                    image=$MUOM_unit.image:400
                [/frame]
            [/extra_anim]
        [/effect]
    [/object]
    {CLEAR_VARIABLE MUOM_unit}

    {WML}

    [modify_unit]
        [filter]
            id={ID}
        [/filter]

        facing={FACING}
    [/modify_unit]

    [animate_unit]
        [filter]
            id={ID}
        [/filter]

        flag=disappear
    [/animate_unit]
#enddef

#define MOVE_UNIT_OFF_MAP ID FACING
    # Animate a unit off the edge of the map. The unit must be on the map.
    # This includes killing the unit at end, so it needs to be stored
    # before calling the macro if it is still needed later.
    # @ID: the id of the unit
    # @FACING: the direction in which to move the unit off the map

    {MOVE_UNIT_OFF_MAP_CORE {ID} {FACING} ()}

    [kill]
        id={ID}
    [/kill]
#enddef

#define MOVE_UNIT_OFF_MAP_HIDE ID FACING
    # Same as MOVE_UNIT_OFF_MAP, but hide unit at the end rather than killing it

    {MOVE_UNIT_OFF_MAP_CORE {ID} {FACING} ()}

    [hide_unit]
        id={ID}
    [/hide_unit]
#enddef

#define MOVE_UNIT_TO_EDGE_AND_OFF_MAP ID X Y FACING
    # Same as MOVE_UNIT_OFF_MAP, but also moves it to the edge at coordinates
    # @x,@Y first, to make the transition smoother if it is desired to do it
    # in one motion, rather than stopping at the edge with a message or something.

    {MOVE_UNIT_OFF_MAP_CORE {ID} {FACING} (
        {MOVE_UNIT (id={ID}) {X} {Y}}
    )}

    [kill]
        id={ID}
    [/kill]
#enddef

#################
# Combat macros #
#################

#define ATTACK_DEFENSE_ANIMATION FILTER1 FILTER2 TYPE HITS TEXT
    # Animation Unit 1 vs. Unit 2
    # FITLER1, FILTER2: filters for attacking and defending units
    # TYPE: melee or ranged
    # HITS: whether this is a hit or miss
    # TEXT: red floating text over defender

    [animate_unit]
        flag=attack
        with_bars=yes
        [filter]
            {FILTER1}
        [/filter]
        [primary_attack]
            range={TYPE}
        [/primary_attack]
        [facing]
            [filter]
                {FILTER2}
            [/filter]
        [/facing]
        hits={HITS}
        [animate]
            flag=defend
            with_bars=yes
            [filter]
                {FILTER2}
            [/filter]
            [primary_attack]
                name={TYPE}
            [/primary_attack]
            [facing]
                [filter]
                    {FILTER1}
                [/filter]
            [/facing]
            text={TEXT}
            red,blue,green=255,0,0
            hits={HITS}
        [/animate]
    [/animate_unit]
#enddef

#define ATTACK_ATTACK_ANIMATION FILTER1 FILTER2 TYPE HITS1 TEXT1 HITS2 TEXT2
    # Animation Unit 1 vs. Unit 2, but both attacking at the same time
    # FITLER1, FILTER2: filters for attacking and defending units
    # TYPE: melee or ranged
    # HITS1, HITS2: whether this is a hit or miss
    # TEXT1, TEXT2: red floating text over defender

    [animate_unit]
        flag=attack
        with_bars=yes
        [filter]
            {FILTER1}
        [/filter]
        [primary_attack]
            range={TYPE}
        [/primary_attack]
        [facing]
            [filter]
                {FILTER2}
            [/filter]
        [/facing]
        text={TEXT1}
        red,blue,green=255,0,0
        hits={HITS1}
        [animate]
            flag=defend
            with_bars=yes
            [filter]
                {FILTER2}
            [/filter]
            [primary_attack]
                name={TYPE}
            [/primary_attack]
            [facing]
                [filter]
                    {FILTER1}
                [/filter]
            [/facing]
            text={TEXT2}
            red,blue,green=255,0,0
            hits={HITS2}
        [/animate]
    [/animate_unit]
#enddef

#define FIGHT_TO_DEATH UNIT1_ID UNIT2_ID STRIKES FIRE_EVENT
    # Have two units fight until death, or for a certain number of strikes
    # Just uses the standard damage for the first weapon type, nothing fancy
    # @STRIKES: the number of strikes to exchange (set to large number for
    #   actual fight to death
    # @FIRE_EVENT: whether or not kill event should fire

    [store_unit]
        [filter]
            id={UNIT1_ID}
        [/filter]
        variable=FTD.unit1
    [/store_unit]
    [store_unit]
        [filter]
            id={UNIT2_ID}
        [/filter]
        variable=FTD.unit2
    [/store_unit]

    {VARIABLE FTD.damage1 $FTD.unit1.attack[0].damage}
    {VARIABLE FTD.damage2 $FTD.unit2.attack[0].damage}

    {VARIABLE FTD.max_strikes {STRIKES}}
    {VARIABLE FTD.strikes 0}

    # Now fight until one of the units is dead, or the strike limit has been reached
    [while]
        [have_unit]
            id=$FTD.unit1.id
        [/have_unit]
        [have_unit]
            id=$FTD.unit2.id
        [/have_unit]
        [variable]
            name=FTD.strikes
            less_than=$FTD.max_strikes
        [/variable]

        [do]
            # Figure out if it's a hit or miss -- I just do this 70/30, not by terrain
            [set_variable]
                name=FTD.random_chance
                rand=0..99
            [/set_variable]
            [if]
                [variable]
                    name=FTD.random_chance
                    less_than=70
                [/variable]

                [then]
                    {VARIABLE FTD.hits yes}
                    {VARIABLE FTD.text $FTD.damage1}
                [/then]

                [else]
                    {VARIABLE FTD.hits no}
                    {VARIABLE FTD.text " "}
                [/else]
            [/if]

            # Animation Unit 1 vs. Unit 2 - always using melee attack
            {ATTACK_DEFENSE_ANIMATION id=$FTD.unit1.id id=$FTD.unit2.id melee $FTD.hits $FTD.text}

            # If it was a hit, reduce health (both in unit and stored variable
            [if]
                [variable]
                    name=FTD.hits
                    equals=yes
                [/variable]

                [then]
                    {VARIABLE_OP FTD.unit2.hitpoints sub $FTD.damage1}
                    [modify_unit]
                        [filter]
                            id=$FTD.unit2.id
                        [/filter]

                        hitpoints=$FTD.unit2.hitpoints
                    [/modify_unit]
                [/then]
            [/if]

            # If hitpoints 0 or below, kill unit
            [if]
                [variable]
                    name=FTD.unit2.hitpoints
                    less_than=1
                [/variable]

                [then]
                    [kill]
                        id=$FTD.unit2.id
                        animate=yes
                        fire_event={FIRE_EVENT}
                    [/kill]
                [/then]

                [else]  # otherwise, fight back
                    # Figure out if it's a hit or miss -- I just do this 70/30, not by terrain
                    [set_variable]
                        name=FTD.random_chance
                        rand=0..99
                    [/set_variable]
                    [if]
                        [variable]
                            name=FTD.random_chance
                            less_than=70
                        [/variable]

                        [then]
                            {VARIABLE FTD.hits yes}
                            {VARIABLE FTD.text $FTD.damage2}
                        [/then]

                        [else]
                            {VARIABLE FTD.hits no}
                            {VARIABLE FTD.text " "}
                        [/else]
                    [/if]

                    # Animation Unit 1 vs. Unit 2 - always using melee attack
                    {ATTACK_DEFENSE_ANIMATION id=$FTD.unit2.id id=$FTD.unit1.id melee $FTD.hits $FTD.text}

                    # If it was a hit, reduce health (both in unit and stored variable
                    [if]
                        [variable]
                            name=FTD.hits
                            equals=yes
                        [/variable]

                        [then]
                            {VARIABLE_OP FTD.unit1.hitpoints sub $FTD.damage2}
                            [modify_unit]
                                [filter]
                                    id=$FTD.unit1.id
                                [/filter]

                                hitpoints=$FTD.unit1.hitpoints
                            [/modify_unit]
                        [/then]
                    [/if]

                    # If hitpoints 0 or below, kill unit
                    [if]
                        [variable]
                            name=FTD.unit1.hitpoints
                            less_than=1
                        [/variable]

                        [then]
                            [kill]
                                id=$FTD.unit1.id
                                animate=yes
                                fire_event={FIRE_EVENT}
                            [/kill]
                        [/then]
                    [/if]
                [/else]
            [/if]

            {VARIABLE_OP FTD.strikes add 1}
        [/do]
    [/while]

    {CLEAR_VARIABLE FTD}
#enddef

###########################################
# Miscellaneous animation or image macros #
###########################################

#define MOVE_UNIT_IMAGEMODS FILTER TO_X TO_Y IMAGE_MODS
    # Move a unit from (FROM_X,FROM_Y) to (TO_X,TO_Y) with IMAGE_MODS in place
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=unit_to_be_moved
        kill=yes
    [/store_unit]
    [move_unit_fake]
        type=$unit_to_be_moved.type
        side=$unit_to_be_moved.side
        x=$unit_to_be_moved.x,{TO_X}
        y=$unit_to_be_moved.y,{TO_Y}
        image_mods={IMAGE_MODS}
    [/move_unit_fake]
    [unstore_unit]
        variable=unit_to_be_moved
        x,y={TO_X},{TO_Y}
        find_vacant=no
        check_passability=no
    [/unstore_unit]
    {CLEAR_VARIABLE unit_to_be_moved}
#enddef

#define MOVE_UNIT_ALONG_PATH ID PATH_X PATH_Y TO_X TO_Y FACING
    # Move a unit from its current position to (TO_X,TO_Y) along the
    # intermediate hexes given by PATH_X and PATH_Y
    # @FACING: facing at end of move

    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=unit_to_be_moved
        kill=yes
    [/store_unit]

    [move_unit_fake]
        type=$unit_to_be_moved.type
        side=$unit_to_be_moved.side
        x=$unit_to_be_moved.x,{PATH_X},{TO_X}
        y=$unit_to_be_moved.y,{PATH_Y},{TO_Y}
    [/move_unit_fake]

    {VARIABLE unit_to_be_moved.facing {FACING}}
    [unstore_unit]
        variable=unit_to_be_moved
        x,y={TO_X},{TO_Y}
        find_vacant=no
        check_passability=no
    [/unstore_unit]

    {CLEAR_VARIABLE unit_to_be_moved}
#enddef

#define HIGHLIGHT_IMAGE_SHORT X Y IMAGE BACKGROUND_VALUE
    # Same as the core macro, but one less blinking and different timing
    [scroll_to]
        x,y={X},{Y}
        check_fogged=false
    [/scroll_to]
    [item]
        x,y={X},{Y}
        halo={IMAGE}
    [/item]
    [redraw][/redraw]
    {DELAY 500}
    [remove_item]
        x,y={X},{Y}
    [/remove_item]
    [item]
        x,y={X},{Y}
        image={BACKGROUND_VALUE}
    [/item]
    [redraw][/redraw]
    [delay]
        time=200
    [/delay]
    [item]
        x,y={X},{Y}
        halo={IMAGE}
    [/item]
    [redraw][/redraw]
    [delay]
        time=500
    [/delay]
    [remove_item]
        x,y={X},{Y}
    [/remove_item]
    [item]
        x,y={X},{Y}
        image={BACKGROUND_VALUE}
    [/item]
    [redraw][/redraw]
    [delay]
        time=200
    [/delay]
    [item]
        x,y={X},{Y}
        image={IMAGE}
    [/item]
    [redraw][/redraw]
#enddef

#define HIGHLIGHT_LABEL X Y LABEL
    # Scroll to and blink a label in and out a few times
    # X,Y: position of the label
    # LABEL: the label text
    {SCROLL_TO {X} {Y}}
    {DELAY 500}
    {REMOVE_LABEL {X} {Y}}
    {DELAY 200}
    {SET_LABEL {X} {Y} {LABEL}}
    {DELAY 500}
    {REMOVE_LABEL {X} {Y}}
    {DELAY 200}
    {SET_LABEL {X} {Y} {LABEL}}
    {DELAY 500}
#enddef

#define EARTHQUAKE_OWN ACTION_WML
    # Creates an earthquake-effect while performing ACTION_WML
    [sound]
        name=rumble.ogg
    [/sound]
    {SCROLL 0 5}
    {SCROLL 0 -5}
    {SCROLL 4 4}
    {SCROLL -4 -4}
    {SCROLL -4 4}
    {SCROLL 4 -4}
    {ACTION_WML}
    {SCROLL 3 6}
    {SCROLL 3 -4}
    {SCROLL -5 0}
    {SCROLL 2 -4}
#enddef

#define RECRUITING_ANIMATION FILTER1 FILTER2
    [animate_unit]
        flag=recruiting
        with_bars=yes
        [filter]
            {FILTER1}
        [/filter]
        [facing]
            [filter]
                {FILTER2}
            [/filter]
        [/facing]
        [animate]
            flag=recruited
            with_bars=yes
            [filter]
                {FILTER2}
            [/filter]
            [facing]
                [filter]
                    {FILTER1}
                [/filter]
            [/facing]
        [/animate]
    [/animate_unit]
#enddef

#define TELEPORT_AWAY FILTER TO_X TO_Y NOT_TERRAIN IPF
    # Teleport a unit to given coordinates (or the closest available hex)
    # that is not of terrain type NOT_TERRAIN

    # Actions at the old location
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=teleported_unit
        animate=yes
    [/store_unit]
    {TELEPORT_ANIM_OUT $teleported_unit.id {IPF}}

    # Find the new location, DISTANCE away from X_ORG,Y_ORG
    {CLOSE_EMPTY_HEX {TO_X} {TO_Y} {NOT_TERRAIN} 0}

    # Unstore at the new location
    {TELEPORT_ANIM_IN $hex_x $hex_y {IPF}}
    [unstore_unit]
        variable=teleported_unit
        x,y=$hex_x,$hex_y
        animate=yes
    [/unstore_unit]

    # Capture village, in case unit ends up on one
    {CAPTURE_FILTERED_VILLAGES_COPY $teleported_unit.side x,y=$hex_x,$hex_y}

    # Redraw so that everything is shown as it is now
    {REDRAW 1}

    {CLEAR_VARIABLE teleported_unit,hex_x,hex_y}
#enddef

#define SLAP_UNIT ID SECOND_ID
    # Animate unit with id={ID} toward unit with id={SECOND_ID}
    # and play a slapping sound
    [adjust_facing]
        id={ID}
        second_id={SECOND_ID}
    [/adjust_facing]

    {EXTRA_ANIM_UNIT {ID} (
        [frame]
            begin=-200
            end=0
            image=$EAU_unit.image
            offset=0~0.6
        [/frame]
        [frame]
            begin=0
            end=200
            image=$EAU_unit.image
            offset=0.6~0
            sound=fist.ogg
        [/frame]
    )}
#enddef
