#textdomain wesnoth-Grnk

#define PRUNES_FIRST_TIME_SUCCESS PRUNES_UNIT_ID
    {IF_VAR prunes_comments.first_time_success not_equals yes (
        [then]
            {MESSAGE {PRUNES_UNIT_ID} "" "" _"Whoa, that's cool!"}
            {VARIABLE prunes_comments.first_time_success yes}
        [/then]
    )}
#enddef

#define PRUNES_FIRST_TIME_USE PRUNES_UNIT_ID PRUNES_EVENT PRUNES_MESSAGE
    {IF_VAR prunes_comments.{PRUNES_EVENT} not_equals yes (
        [then]
            {MESSAGE {PRUNES_UNIT_ID} "" "" {PRUNES_MESSAGE}}
            {VARIABLE prunes_comments.{PRUNES_EVENT} yes}
        [/then]
    )}
#enddef

#define PRUNES_EVENTS PRUNES_UNIT_ID ENEMY_SIDES TELE_TO_X TELE_TO_Y NOT_TERRAIN
    # One event for each of the prunes actions
    # The rely on certain variables to be set in the other parts of the code, not to be used in isolation

    # Unsuccessful prune event.  Used in Part 1 & 2
    [event]
        name=prunes_puff
        first_time_only=no

        {PUFF $prunes.unit1.x $prunes.unit1.y "~GS()~CS(100,50,100)" torch-miss.ogg}
        {PRUNES_FIRST_TIME_USE {PRUNES_UNIT_ID} puff  _"I guess them prunes don't work every time."}
    [/event]

    # Petrify enemy unit.  Used in Part 1 & 2
    [event]
        name=prunes_petrify
        first_time_only=no

        {FIREBALL $prunes.unit1.x $prunes.unit1.y "~GS()~CS(100,50,100)" fire.wav (
            [petrify]
                id=$prunes.unit1.id
            [/petrify]
        )}

        {PRUNES_FIRST_TIME_SUCCESS {PRUNES_UNIT_ID}}
        {PRUNES_FIRST_TIME_USE {PRUNES_UNIT_ID} petrify  _"You won't be going anywhere anytime soon!
<i>[Note: The magical prunes will have no further effect on petrified units.]</i>"}

        # In S13, this could trigger one of the enemy leaders to leave ...
        [fire_event]
            name=enemy_leader_leaves
        [/fire_event]
        # ... or the end of the scenario
        [fire_event]
            name=are_we_done
        [/fire_event]
    [/event]

    # Teleport enemy unit away.  Used in Part 1 & 2
    [event]
        name=prunes_teleport
        first_time_only=no

        {TELEPORT_AWAY2 id=$prunes.unit1.id {TELE_TO_X} {TELE_TO_Y} {NOT_TERRAIN} "~CS(0,-50,0)"}

        {PRUNES_FIRST_TIME_SUCCESS {PRUNES_UNIT_ID}}
        {PRUNES_FIRST_TIME_USE {PRUNES_UNIT_ID} teleport _"Away with you!
"+{WHISPER _"If only I knew how to do this intentionally."}}
    [/event]

    # Have two enemy units fight to the death.  Used in Part 1 & 2
    [event]
        name=prunes_berserk
        first_time_only=no

        # Find the closest enemy unit to the selected enemy unit that is not petrified
        {FIND_CLOSEST_HEX $prunes.unit1.x $prunes.unit1.y (
            [filter]
                side={ENEMY_SIDES}
                [not]
                    id=$prunes.unit1.id
                [/not]
                [filter_wml]
                    [not]
                        [status]
                            petrified=yes
                        [/status]
                    [/not]
                [/filter_wml]
            [/filter]
        )}

        # If there is a unit to attack, fight until one of them is dead
        # otherwise, just a puff again
        {IF_VAR hex_x not_equals -1 (
            [then]  # If there is a unit to attack
                {LEADING_HALO $prunes.unit1.x $prunes.unit1.y "~CROP(0,20,72,52)~SCALE(0,120)~CS(0,-50,0)" (entangle.wav)}

                # Need to store this unit as all kinds of parameters are needed
                [store_unit]
                    [filter]
                        x,y=$hex_x,$hex_y
                    [/filter]
                    variable=prunes.unit2
                [/store_unit]
                #{DEBUG "Unit to attack at: $hex_x $hex_y: $prunes.unit2.id"}

                # If they are not already adjacent, move the first unit
                [if]
                    [not]
                        [have_unit]
                            id=$prunes.unit2.id
                            [filter_adjacent]
                                id=$prunes.unit1.id
                            [/filter_adjacent]
                        [/have_unit]
                    [/not]
                    [then]
                        {CLOSE_EMPTY_HEX $prunes.unit2.x $prunes.unit2.y {NOT_TERRAIN} 1}
                        {MOVE_UNIT id=$prunes.unit1.id $hex_x $hex_y}
                        {CLEAR_VARIABLE hex_x,hex_y}
                    [/then]
                [/if]

                {FIGHT_TO_DEATH $prunes.unit1.id $prunes.unit2.id yes}

                {PRUNES_FIRST_TIME_SUCCESS {PRUNES_UNIT_ID}}
                {PRUNES_FIRST_TIME_USE {PRUNES_UNIT_ID} berserk  _"That's right!  Fight each other, not us."}
            [/then]
            [else]  # Otherwise, there's just a puff
                {PUFF $prunes.unit1.x $prunes.unit1.y "~GS()~CS(100,50,100)" torch-miss.ogg}
                {PRUNES_FIRST_TIME_USE {PRUNES_UNIT_ID} puff  _"I guess they don't work every time."}
            [/else]
        )}
    [/event]
#enddef

#define SET_MENU_PRUNES PRUNES_UNIT_ID RADIUS ENEMY_SIDES TELE_TO_X TELE_TO_Y NOT_TERRAIN
    [set_menu_item]
        id=m09_menu_prunes
        description=_"Use magical prunes"
        image=items/ball-blue.png~CROP(26,16,20,40)~SCALE(20,20)~CS(-50,-100,-100)
        [show_if]
        [/show_if]
        [command]
            # Get main unit's location location
            {STORE_UNIT_VAR id={PRUNES_UNIT_ID} x prunes.x}
            {STORE_UNIT_VAR id={PRUNES_UNIT_ID} y prunes.y}
            {SCROLL_TO $prunes.x $prunes.y}

            # First time he tries to use one
            {IF_VAR prunes_comments.first_time_attempt not_equals yes (
                [then]
                    {MESSAGE {PRUNES_UNIT_ID} "" "" _"Maybe if I throw them up into the air?"}
                    {VARIABLE prunes_comments.first_time_attempt yes}
                [/then]
            )}
            {LEADING_HALO $prunes.x $prunes.y "~CROP(0,20,72,52)~SCALE(0,120)~CS(0,-50,0)" (entangle.wav)}

            # See if there is an enemy_unit unit within RADIUS hexes
            # Non-petrified units only
            [store_unit]
                [filter]
                    side={ENEMY_SIDES}
                    [filter_wml]
                        [not]
                            [status]
                                petrified=yes
                            [/status]
                        [/not]
                    [/filter_wml]
                    [filter_location]
                        x,y=$prunes.x,$prunes.y
                        radius={RADIUS}
                    [/filter_location]
                [/filter]
                variable=prunes.tmp_units
            [/store_unit]
            #{DEBUG "Number of close enough units: $prunes.tmp_units.length"}

            # Now pick one of those units randomly
            # If there is none, make a puff at main unit's location,
            # Otherwise, perform all the prune actions
            {IF_VAR prunes.tmp_units.length less_than 1 (
                [then]
                    {PUFF $prunes.x $prunes.y "~GS()~CS(100,50,100)" torch-miss.ogg}
                    {MESSAGE {PRUNES_UNIT_ID} "" "" _"Rats!  I'm not close enough to an enemy unit."}
                [/then]
                [else]
                    # Store the (randomly) selected unit in prunes.unit1
                    {VARIABLE prunes.i $prunes.tmp_units.length}
                    {VARIABLE_OP prunes.i add -1}
                    {RANDOM 0..$prunes.i}
                    [store_unit]
                        [filter]
                            id=$prunes.tmp_units[$random].id
                        [/filter]
                        variable=prunes.unit1
                    [/store_unit]
                    #{DEBUG "Selected unit: $random $prunes.unit1.id"}

                    # Now select one action at random
                    {RANDOM "petrify,teleport,berserk,puff"}

                    # This block is for debugging only
                    # Manually set variable choose_prunes to yes in debug mode
                    {IF_VAR choose_prunes equals yes (
                        [then]
                            [message]
                                speaker=narrator
                                message=_"What effect should the prunes have?"
                                [text_input]
                                    label=_" Enter: petrify, teleport, berserk or puff"
                                    variable=random
                                [/text_input]
                            [/message]
                        [/then]
                    )}
                    #{DEBUG "Select: $prunes.unit1.id, $random"}

                    # Prunes do not work on the leaders of the enemy sides
                    {IF_VAR prunes.unit1.canrecruit equals yes (
                        [then]
                            {VARIABLE random "puff"}
                        [/then]
                    )}

                    [fire_event]
                        name=prunes_$random
                    [/fire_event]

                    # This will not work on the leaders of the enemy sides
                    {IF_VAR prunes.unit1.canrecruit equals yes (
                        [then]
                            {MESSAGE $prunes.unit1.id "" "" _"Hah, your little magic tricks don't work on me.  The Master's powers protect me."}
                        [/then]
                    )}
                [/else]
            )}
            {CLEAR_VARIABLE prunes,random,hex_x,hex_y}

            # Can only be used once per turn, reset at beginning of next turn
            {CLEAR_MENU_PRUNES}
        [/command]
    [/set_menu_item]
#enddef

#define CLEAR_MENU_PRUNES
    # Disable menu item: prunes
    [set_menu_item]
        id=m09_menu_prunes
        [show_if]
            [not]
            [/not]
        [/show_if]
    [/set_menu_item]
#enddef

#define PRUNES_SETUP PRUNES_UNIT_ID RADIUS ENEMY_SIDES TELE_TO_X TELE_TO_Y NOT_TERRAIN
    # Set up the prunes event, the menu item, and an event that resets the menu item
    # at the beginning of each turn, as it is disabled after each use (can only be used once per turn)
    # PRUNES_UNIT_ID: unit which does the actions
    # RADIUS: actions are performed on enemy units within RADIUS hexes
    # ENEMY_SIDES: side(s) against which these actions are performed
    # TELE_TO_X TELE_TO_Y: Location for teleport; not onto terrain NOT_TERRAIN

    {PRUNES_EVENTS {PRUNES_UNIT_ID} {ENEMY_SIDES} {TELE_TO_X} {TELE_TO_Y} {NOT_TERRAIN}}
    {SET_MENU_PRUNES {PRUNES_UNIT_ID} {RADIUS} {ENEMY_SIDES} {TELE_TO_X} {TELE_TO_Y} {NOT_TERRAIN}}
    [event]
        name=new turn
        first_time_only=no

        {SET_MENU_PRUNES {PRUNES_UNIT_ID} {RADIUS} {ENEMY_SIDES} {TELE_TO_X} {TELE_TO_Y} {NOT_TERRAIN}}
    [/event]
#enddef

#define PRUNES_SET_VARS_PART2
    # Set variables so that first time messages of Part 1 events don't play again

    {VARIABLE prunes_comments.first_time_attempt yes}
    {VARIABLE prunes_comments.first_time_success yes}
    {VARIABLE prunes_comments.puff yes}
    {VARIABLE prunes_comments.petrify yes}
    {VARIABLE prunes_comments.teleport yes}
    {VARIABLE prunes_comments.berserk yes}
#enddef
